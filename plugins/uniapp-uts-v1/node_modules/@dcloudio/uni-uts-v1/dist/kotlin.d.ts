import type { UTSOutputOptions, UTSResult } from '@dcloudio/uts';
import { type CompilerServer, type ToKotlinOptions } from './utils';
import type { Module } from '../types/types';
import type { APP_PLATFORM } from './manifest/utils';
export interface KotlinCompilerServer extends CompilerServer {
    getKotlincHome(): string;
    getDefaultJar(arg?: any): string[];
    compile(options: {
        kotlinc: string[];
        d8: string[];
        stderrListener: (data: string) => void;
        pageCount: number;
    }, projectPath: string): Promise<{
        code: number;
        msg: string;
        data?: {
            dexList: string[];
        };
    }>;
    checkDependencies?: (configJsonPath: string, options?: {
        type: 1 | 2;
        valid: boolean;
    }) => Promise<{
        code: number;
        msg: string;
        data: string[];
    }>;
    checkRResources?: (resDir: string) => Promise<{
        code: number;
        msg: string;
        data: {
            jarPath: string;
            uniModuleName: string;
        };
    }>;
}
export declare function createKotlinResolveTypeReferenceName(_namespace: string, _ast: Module): (name: string) => string;
export declare function getInjectApis(): string[];
export declare function runKotlinProd(filename: string, components: Record<string, string>, { pluginId, isPlugin, isX, isSingleThread, hookClass, extApis, transform, sourceMap, uniModules, }: {
    pluginId: string;
    isPlugin: boolean;
    isX: boolean;
    isSingleThread: boolean;
    hookClass: string;
    extApis?: Record<string, [string, string]>;
    transform?: UTSOutputOptions['transform'];
    sourceMap?: boolean;
    uniModules: string[];
}): Promise<UTSResult | undefined>;
export type RunKotlinDevResult = UTSResult & {
    type: 'kotlin';
    changed: string[];
    inject_modules: string[];
    kotlinc: boolean;
    kotlincJars?: string[];
};
export type RunKotlinBuildResult = UTSResult & {
    type: 'kotlin';
    inject_modules: string[];
    kotlinc: false;
};
interface RunKotlinDevOptions {
    components: Record<string, string>;
    isX: boolean;
    isSingleThread: boolean;
    isPlugin: boolean;
    sourceMap: boolean;
    cacheDir: string;
    pluginRelativeDir: string;
    is_uni_modules: boolean;
    extApis?: Record<string, [string, string]>;
    transform?: UTSOutputOptions['transform'];
    uniModules: string[];
}
export declare function runKotlinDev(filename: string, { components, isX, isSingleThread, isPlugin, cacheDir, pluginRelativeDir, is_uni_modules, extApis, transform, sourceMap, uniModules, }: RunKotlinDevOptions): Promise<RunKotlinDevResult | undefined>;
export declare function hasDeps(configJsonFile: string): boolean;
export declare function resolveAndroidDepFiles(filename: string): string[];
export declare function compile(filename: string, { inputDir, outputDir, sourceMap, components, isX, isSingleThread, isPlugin, extApis, transform, uniModules, }: ToKotlinOptions): Promise<UTSResult | undefined>;
export declare function resolveKotlincArgs(files: string[], dest: string, kotlinc: string, jars: string[]): string[];
export declare const D8_DEFAULT_ARGS: string[];
export declare function resolveD8Args(filename: string): string[];
export declare function resolveAndroidArchiveOutputPath(aar: string): string;
export declare function resolveDexFile(jarFile: string): string;
export declare function resolveJarPath(platform: APP_PLATFORM, cacheDir: string, pluginRelativeDir: string, filename: string): string;
export declare function checkAndroidVersionTips(pluginId: string, pluginDir: string, is_uni_modules: boolean): string | undefined;
export declare function getUniModulesEncryptCacheJars(cacheDir: string, plugins?: string[]): string[];
export declare function getUniModulesCacheJars(cacheDir: string, plugins?: string[]): string[];
export declare function getUniModulesJars(outputDir: string, plugins?: string[]): string[];
export declare function createStderrListener(inputDir: string, sourceMapDir: string, waiting: {
    done: Promise<void> | undefined;
}): (data: any) => Promise<void>;
export declare function kotlinDir(outputDir: string): string;
export declare function parseUTSModuleLibsJars(plugins: string[]): string[];
export declare function parseUTSModuleConfigJsonJars(checkType: 1 | 2, plugins: string[], checkDependencies: Required<KotlinCompilerServer>['checkDependencies'], checkDependenciesValid: boolean, checkError: (plugin: string) => void): Promise<string[]>;
export {};
