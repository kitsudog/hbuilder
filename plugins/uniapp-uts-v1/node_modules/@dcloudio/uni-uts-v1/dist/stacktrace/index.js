"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUTSSyntaxError = exports.parseUTSRuntimeStacktrace = exports.parseUTSJavaScriptRuntimeStacktrace = exports.parseUTSKotlinRuntimeStacktrace = exports.parseUTSKotlinStacktrace = exports.parseUTSSwiftPluginStacktrace = void 0;
const utils_1 = require("../utils");
const js_1 = require("./js");
const kotlin_1 = require("./kotlin");
var swift_1 = require("./swift");
Object.defineProperty(exports, "parseUTSSwiftPluginStacktrace", { enumerable: true, get: function () { return swift_1.parseUTSSwiftPluginStacktrace; } });
var kotlin_2 = require("./kotlin");
Object.defineProperty(exports, "parseUTSKotlinStacktrace", { enumerable: true, get: function () { return kotlin_2.parseUTSKotlinStacktrace; } });
Object.defineProperty(exports, "parseUTSKotlinRuntimeStacktrace", { enumerable: true, get: function () { return kotlin_2.parseUTSKotlinRuntimeStacktrace; } });
var js_2 = require("./js");
Object.defineProperty(exports, "parseUTSJavaScriptRuntimeStacktrace", { enumerable: true, get: function () { return js_2.parseUTSJavaScriptRuntimeStacktrace; } });
function parseUTSRuntimeStacktrace(stacktrace, options) {
    if (options.language === 'kotlin') {
        return (0, kotlin_1.parseUTSKotlinRuntimeStacktrace)(stacktrace, options);
    }
    else if (options.language === 'javascript') {
        return (0, js_1.parseUTSJavaScriptRuntimeStacktrace)(stacktrace, options);
    }
}
exports.parseUTSRuntimeStacktrace = parseUTSRuntimeStacktrace;
function parseUTSSyntaxError(error, inputDir) {
    if (error instanceof Error) {
        error = error.message;
    }
    let msg = String(error).replace(/\t/g, ' ');
    let res = null;
    const syntaxErrorRe = /(,-\[(.*):(\d+):(\d+)\])/g;
    while ((res = syntaxErrorRe.exec(msg))) {
        const [row, filename, line, column] = res.slice(1);
        msg = msg.replace(row, `at ${(0, utils_1.relative)(filename.split('?')[0], inputDir)}:${parseInt(line) + 3}:${column}`);
    }
    return msg;
}
exports.parseUTSSyntaxError = parseUTSSyntaxError;
