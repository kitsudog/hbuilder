"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUTSJavaScriptRuntimeStacktrace = void 0;
const sourceMap_1 = require("../sourceMap");
const utils_1 = require("./utils");
const JS_ERROR_RE = /\(\d+:\d+\)\s(.*)\s@([^\s]+\.js)\:(\d+)\:(\d+)/;
const VUE_ERROR_RE = /@([^\s]+\.js)\:(\d+)\:(\d+)/;
// app-service.js(4:56) ReferenceError:Can't find variable: a @app-service.js:4:56
function parseUTSJavaScriptRuntimeStacktrace(stacktrace, options) {
    const res = [];
    const lines = stacktrace.split(utils_1.splitRE);
    const sourceMapDir = (0, utils_1.resolveSourceMapDirByCacheDir)(options.cacheDir);
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        let codes = parseUTSJavaScriptRuntimeStacktraceJsErrorLine(line, sourceMapDir);
        if (codes.length) {
            const color = options.logType
                ? utils_1.COLORS[options.logType] || ''
                : '';
            const [errorCode, ...other] = codes;
            let error = 'error: ' + errorCode;
            if (color) {
                error = color + error + color;
            }
            return [error, ...other].join('\n');
        }
        codes = parseUTSJavaScriptRuntimeStacktraceVueErrorLine(line, sourceMapDir);
        if (codes.length && res.length) {
            const color = options.logType
                ? utils_1.COLORS[options.logType] || ''
                : '';
            let error = 'error: ' + res[0];
            if (color) {
                error = color + error + color;
            }
            const [, ...other] = res;
            const otherCodes = other.map((item) => {
                if (color) {
                    return color + item + color;
                }
                return item;
            });
            return [error, ...otherCodes, ...codes].join('\n');
        }
        res.push(line);
    }
    return '';
}
exports.parseUTSJavaScriptRuntimeStacktrace = parseUTSJavaScriptRuntimeStacktrace;
// at <Index __pageId=1 __pagePath="pages/index/index" __pageQuery=  ... >
// Can't find variable: a
// onLoad@app-service.js:9:64
// callWithErrorHandling@uni-app-x-framework.js:2279:23
function parseUTSJavaScriptRuntimeStacktraceVueErrorLine(lineStr, sourceMapDir) {
    const lines = [];
    const matches = lineStr.match(VUE_ERROR_RE);
    if (!matches) {
        return lines;
    }
    const [, filename, line] = matches;
    const sourceMapFile = (0, utils_1.resolveSourceMapFileBySourceFile)(filename, sourceMapDir);
    if (!sourceMapFile) {
        return lines;
    }
    const originalPosition = (0, sourceMap_1.originalPositionForSync)({
        sourceMapFile,
        line: parseInt(line),
        column: 0,
        withSourceContent: true,
    });
    if (originalPosition.source && originalPosition.sourceContent) {
        lines.push(`at ${originalPosition.source.split('?')[0]}:${originalPosition.line}:${originalPosition.column}`);
        if (originalPosition.line !== null && originalPosition.column !== null) {
            const { start, end } = (0, utils_1.lineColumnToStartEnd)(originalPosition.sourceContent, originalPosition.line, originalPosition.column);
            lines.push((0, utils_1.generateCodeFrame)(originalPosition.sourceContent, start, end).replace(/\t/g, ' '));
        }
    }
    return lines;
}
function parseUTSJavaScriptRuntimeStacktraceJsErrorLine(lineStr, sourceMapDir) {
    const lines = [];
    const matches = lineStr.match(JS_ERROR_RE);
    if (!matches) {
        return lines;
    }
    const [, error, filename, line] = matches;
    const sourceMapFile = (0, utils_1.resolveSourceMapFileBySourceFile)(filename, sourceMapDir);
    if (!sourceMapFile) {
        return lines;
    }
    const originalPosition = (0, sourceMap_1.originalPositionForSync)({
        sourceMapFile,
        line: parseInt(line),
        column: 0,
        withSourceContent: true,
    });
    if (originalPosition.source && originalPosition.sourceContent) {
        lines.push(error);
        lines.push(`at ${originalPosition.source.split('?')[0]}:${originalPosition.line}:${originalPosition.column}`);
        if (originalPosition.line !== null && originalPosition.column !== null) {
            const { start, end } = (0, utils_1.lineColumnToStartEnd)(originalPosition.sourceContent, originalPosition.line, originalPosition.column);
            lines.push((0, utils_1.generateCodeFrame)(originalPosition.sourceContent, start, end).replace(/\t/g, ' '));
        }
    }
    return lines;
}
