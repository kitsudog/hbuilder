"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUTSSwiftPluginStacktrace = void 0;
const sourceMap_1 = require("../sourceMap");
const utils_1 = require("./utils");
const uniModulesSwiftUTSRe = /(.*)index.swift:([0-9]+):([0-9]+):\s+error:\s+(.*)/;
async function parseUTSSwiftPluginStacktrace({ stacktrace, sourceRoot, sourceMapFile, }) {
    const res = [];
    const lines = stacktrace.split(utils_1.splitRE);
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const codes = await parseUTSStacktraceLine(line, uniModulesSwiftUTSRe, sourceMapFile, sourceRoot);
        if (codes && codes.length) {
            res.push(...codes);
        }
        else {
            res.push(line);
        }
    }
    return res.join('\n');
}
exports.parseUTSSwiftPluginStacktrace = parseUTSSwiftPluginStacktrace;
async function parseUTSStacktraceLine(lineStr, re, sourceMapFile, sourceRoot) {
    const uniModulesMatches = lineStr.match(re);
    if (!uniModulesMatches) {
        return;
    }
    const lines = [];
    const [, , line, column, message] = uniModulesMatches;
    const originalPosition = await (0, sourceMap_1.originalPositionFor)({
        sourceMapFile,
        line: parseInt(line),
        column: parseInt(column),
        withSourceContent: true,
    });
    if (originalPosition.source && originalPosition.sourceContent) {
        lines.push(`${message}`);
        lines.push(`at ${originalPosition.source.split('?')[0]}:${originalPosition.line}:${originalPosition.column}`);
        if (originalPosition.line !== null && originalPosition.column !== null) {
            lines.push((0, utils_1.generateCodeFrame)(originalPosition.sourceContent, {
                line: originalPosition.line,
                column: originalPosition.column,
            }).replace(/\t/g, ' '));
        }
    }
    else {
        lines.push(lineStr);
    }
    return lines;
}
