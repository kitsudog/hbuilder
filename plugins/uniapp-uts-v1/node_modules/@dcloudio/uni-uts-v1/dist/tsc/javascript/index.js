"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uts2js = void 0;
const path_1 = __importDefault(require("path"));
const shared_1 = require("@vue/shared");
const shared_2 = require("../../shared");
const uts2js = (options) => {
    const inputDir = options.inputDir;
    const isWeb = process.env.UNI_UTS_PLATFORM === 'web';
    (0, shared_1.extend)(options, {
        cwd: inputDir,
        check: isWeb,
        noCache: process.env.NODE_ENV === 'production' || isWeb,
        tsconfigOverride: {
            compilerOptions: {
                rootDir: inputDir,
                sourceMap: isWeb,
                ignoreDeprecations: '5.0',
                preserveValueImports: true,
                importsNotUsedAsValues: 'preserve',
                verbatimModuleSyntax: false,
            },
        },
    });
    if (!options.tsconfigOverride) {
        options.tsconfigOverride = {};
    }
    if (!options.tsconfigOverride.compilerOptions) {
        options.tsconfigOverride.compilerOptions = {};
    }
    options.tsconfigOverride.compilerOptions.sourceMap =
        process.env.NODE_ENV === 'development';
    if (!options.tsconfig) {
        if ((0, shared_2.isInHBuilderX)()) {
            options.tsconfig = path_1.default.resolve(__dirname, '../../../lib/tsconfig/hbuilderx/tsconfig.json');
        }
        else {
            options.tsconfig = path_1.default.resolve(inputDir, '../tsconfig.json');
        }
    }
    if (!options.typescript) {
        options.typescript = require('../../../lib/typescript');
    }
    if ((0, shared_2.isInHBuilderX)()) {
        const hxPluginPath = process.env.UNI_HBUILDERX_PLUGINS;
        (0, shared_1.extend)(options.tsconfigOverride.compilerOptions, {
            paths: {
                '@dcloudio/*': [
                    path_1.default.resolve(hxPluginPath, 'uniapp-cli-vite/node_modules/@dcloudio/*'),
                ],
                '@vue/runtime-core': [
                    path_1.default.resolve(hxPluginPath, 'uniapp-cli-vite/node_modules/@vue/runtime-core'),
                ],
                vue: [
                    path_1.default.resolve(hxPluginPath, 'uniapp-cli-vite/node_modules/@vue/runtime-core'),
                ],
            },
            typeRoots: [path_1.default.resolve(__dirname, '../../../lib/tsconfig/types')],
        });
    }
    else {
        (0, shared_1.extend)(options.tsconfigOverride.compilerOptions, {
            paths: {
                vue: [path_1.default.resolve(inputDir, '../node_modules/@vue/runtime-core')],
            },
            typeRoots: [path_1.default.resolve(__dirname, '../../../lib/tsconfig/types')],
        });
    }
    if ((0, shared_1.isFunction)(globalThis.uts2js)) {
        return globalThis.uts2js(options);
    }
    return require('../../../lib/javascript').uts2js(options);
};
exports.uts2js = uts2js;
