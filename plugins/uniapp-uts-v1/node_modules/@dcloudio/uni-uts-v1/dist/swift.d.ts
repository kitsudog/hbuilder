import { type ToSwiftOptions } from './utils';
import type { UTSOutputOptions, UTSResult } from '@dcloudio/uts';
export declare function runSwiftProd(filename: string, components: Record<string, string>, { pluginId, isPlugin, isX, isSingleThread, extApis, transform, sourceMap, hookClass, uniModules, }: {
    pluginId: string;
    isPlugin: boolean;
    isX: boolean;
    isSingleThread: boolean;
    hookClass: string;
    extApis?: Record<string, [string, string]>;
    transform?: UTSOutputOptions['transform'];
    sourceMap?: boolean;
    uniModules: string[];
}): Promise<void>;
export type RunSwiftDevResult = UTSResult & {
    type: 'swift';
    code: number;
    msg: string;
    changed: string[];
};
interface RunSwiftDevOptions {
    components: Record<string, string>;
    isX: boolean;
    isSingleThread: boolean;
    isPlugin: boolean;
    extApis?: Record<string, [string, string]>;
    transform?: UTSOutputOptions['transform'];
    sourceMap?: boolean;
    uniModules: string[];
}
export declare function runSwiftDev(filename: string, { components, isX, isSingleThread, isPlugin, extApis, transform, sourceMap, uniModules, }: RunSwiftDevOptions): Promise<RunSwiftDevResult | undefined>;
export declare function compile(filename: string, { inputDir, outputDir, sourceMap, components, isX, isSingleThread, isPlugin, extApis, transform, uniModules, }: ToSwiftOptions): Promise<UTSResult | undefined>;
export declare function resolveIOSDepFiles(filename: string): string[];
export declare function checkIOSVersionTips(pluginId: string, pluginDir: string, is_uni_modules: boolean): string | undefined;
export {};
