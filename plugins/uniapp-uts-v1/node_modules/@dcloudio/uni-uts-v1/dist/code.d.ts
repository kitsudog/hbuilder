import type { Param, TsInterfaceDeclaration } from '../types/types';
export declare const enum FORMATS {
    ES = "es",
    CJS = "cjs"
}
export interface ClassMeta {
    typeParams?: boolean;
}
type Types = {
    interface: Record<string, {
        returned: boolean;
        decl: TsInterfaceDeclaration;
    }>;
    class: Record<string, ClassMeta>;
    fn: Record<string, Param[]>;
    alias: Record<string, {}>;
};
interface Meta {
    typeParams: string[];
    exports: Record<string, {
        type: 'var' | 'function' | 'class' | 'interface';
        params?: Parameter[];
    }>;
    types: Record<string, 'function' | 'class' | 'interface' | 'typealias'>;
    components: string[];
}
export interface GenProxyCodeOptions {
    is_uni_modules: boolean;
    id: string;
    name: string;
    extname: string;
    namespace: string;
    androidComponents?: Record<string, string>;
    iosComponents?: Record<string, string>;
    format?: FORMATS;
    inputDir?: string;
    pluginRelativeDir?: string;
    moduleName?: string;
    moduleType?: string;
    types?: Types;
    meta?: Meta;
    isExtApi?: boolean;
    androidHookClass?: string;
    iOSHookClass?: string;
}
export declare function genProxyCode(module: string, options: GenProxyCodeOptions): Promise<string>;
export declare function genComponentsCode(format: FORMATS | undefined, androidComponents: Record<string, string>, iosComponents: Record<string, string>): string;
export declare function resolveRootIndex(module: string, options: GenProxyCodeOptions): string | false;
export declare function resolveRootInterface(module: string, options: GenProxyCodeOptions): string | false;
export declare function resolvePlatformIndexFilename(platform: 'app-android' | 'app-ios', module: string, options: GenProxyCodeOptions): string;
export declare function resolvePlatformIndex(platform: 'app-android' | 'app-ios', module: string, options: GenProxyCodeOptions): string | false;
interface Parameter {
    name: string;
    type: string;
    default?: string | number | boolean;
}
export {};
