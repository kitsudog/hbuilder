"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.HTMLParser=exports.Node=void 0;const htmlScanner_1=require("./htmlScanner"),arrays_1=require("../utils/arrays"),htmlLanguageTypes_1=require("../htmlLanguageTypes");class Node{get attributeNames(){return this.attributes?Object.keys(this.attributes):[]}constructor(e,t,n,a){this.start=e,this.end=t,this.children=n,this.parent=a,this.closed=!1}isSameTag(e){return void 0===this.tag?void 0===e:void 0!==e&&this.tag.length===e.length&&this.tag.toLowerCase()===e}get firstChild(){return this.children[0]}get lastChild(){return this.children.length?this.children[this.children.length-1]:void 0}findNodeBefore(e){const t=(0,arrays_1.findFirst)(this.children,(t=>e<=t.start))-1;if(t>=0){const n=this.children[t];if(e>n.start){if(e<n.end)return n.findNodeBefore(e);const t=n.lastChild;return t&&t.end===n.end?n.findNodeBefore(e):n}}return this}findNodeAt(e){const t=(0,arrays_1.findFirst)(this.children,(t=>e<=t.start))-1;if(t>=0){const n=this.children[t];if(e>n.start&&e<=n.end)return n.findNodeAt(e)}return this}}exports.Node=Node;class HTMLParser{constructor(e){this.dataManager=e}parseDocument(e){return this.parse(e.getText(),this.dataManager.getVoidElements(e.languageId))}parse(e,t){const n=(0,htmlScanner_1.createScanner)(e,void 0,void 0,!0),a=new Node(0,e.length,[],void 0);let r,s=a,o=-1,i=null,d=n.scan();for(;d!==htmlLanguageTypes_1.TokenType.EOS;){switch(d){case htmlLanguageTypes_1.TokenType.StartTagOpen:const a=new Node(n.getTokenOffset(),e.length,[],s);s.children.push(a),s=a;break;case htmlLanguageTypes_1.TokenType.StartTag:s.tag=n.getTokenText();break;case htmlLanguageTypes_1.TokenType.StartTagClose:s.parent&&(s.end=n.getTokenEnd(),n.getTokenLength()?(s.startTagEnd=n.getTokenEnd(),s.tag&&this.dataManager.isVoidElement(s.tag,t)&&(s.closed=!0,s=s.parent)):s=s.parent);break;case htmlLanguageTypes_1.TokenType.StartTagSelfClose:s.parent&&(s.closed=!0,s.end=n.getTokenEnd(),s.startTagEnd=n.getTokenEnd(),s=s.parent);break;case htmlLanguageTypes_1.TokenType.EndTagOpen:o=n.getTokenOffset(),r=void 0;break;case htmlLanguageTypes_1.TokenType.EndTag:r=n.getTokenText().toLowerCase();break;case htmlLanguageTypes_1.TokenType.EndTagClose:let d=s;for(;!d.isSameTag(r)&&d.parent;)d=d.parent;if(d.parent){for(;s!==d;)s.end=o,s.closed=!1,s=s.parent;s.closed=!0,s.endTagStart=o,s.end=n.getTokenEnd(),s=s.parent}break;case htmlLanguageTypes_1.TokenType.AttributeName:{i=n.getTokenText();let e=s.attributes,t=s.attributeNamesRange;e&&t||(s.attributes=e={},s.attributeNamesRange=t={},s.attributeValuesRange={}),t[i]={start:n.getTokenOffset(),end:n.getTokenEnd()},e[i]=null;break}case htmlLanguageTypes_1.TokenType.AttributeValue:{const e=n.getTokenText(),t=s.attributes,a=s.attributeValuesRange;t&&i&&a&&(t[i]=e,a[i]={start:n.getTokenOffset(),end:n.getTokenEnd()},i=null);break}}d=n.scan()}for(;s.parent;)s.end=e.length,s.closed=!1,s=s.parent;return{roots:a.children,findNodeBefore:a.findNodeBefore.bind(a),findNodeAt:a.findNodeAt.bind(a)}}}exports.HTMLParser=HTMLParser;