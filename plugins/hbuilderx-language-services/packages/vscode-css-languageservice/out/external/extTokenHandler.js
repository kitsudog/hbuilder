"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&__createBinding(t,e,n);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.ExtTokenHandler=void 0;const nodes=__importStar(require("../parser/cssNodes")),cssLanguageExtTypes_1=require("./cssLanguageExtTypes");class ExtTokenHandler{constructor(e){this._allTokenCache=new Map,this._scanner=new cssLanguageExtTypes_1.Scanner,this._scanner=e}createNode(e,t,n){return new nodes.Node(t,n,e)}create(e,t,n){return new e(t,n)}getScanner(){return this._scanner}getAllTokenMap(e,t){if(this._offsetIndex=void 0,this._allTokenCache.has(e.uri)){const t=this._allTokenCache.get(e.uri);if(t.version===e.version&&0!==e.version)return t.tokenList}const n=this.getScanner();n.setSource(e.getText());const r=new Map;let s=0;for(;;){const e=n.scan();if(r.set(s,e),this._offsetIndex||e.offset+e.len>t&&(this._offsetIndex=s),e.type===cssLanguageExtTypes_1.TokenType.EOF)break;s++}if(0!==r.size)return this._allTokenCache.set(e.uri,{version:e.version,tokenList:r}),r}getDataFromTokenList(e,t,n,r,s="blacklist"){t+="next"===n?1:-1;let o=e.get(t);if(o){for(;o;){let i=r.includes(o.type);if("whitelist"===s&&(i=!i),!i)break;t+="next"===n?1:-1,o=e.get(t)}return{index:t,token:o}}}getContextToken(e,t,n){let r=this._offsetIndex;if(!r)for(let n=0;n<e.size;n++){const s=e.get(n);if(s&&s.offset+s.len>t){r=n;break}}if(!r)return;const s=e.get(r);if(!s)return;const o={index:r,token:s};let i=this.getDataFromTokenList(e,r,"prev",n),a=this.getDataFromTokenList(e,r,"next",n);return i||(i=o),a||(a=o),{nextToken:a,prevToken:i,currToken:o}}getScannerType(){this._scanner.constructor,cssLanguageExtTypes_1.Scanner;const e=this._scanner.constructor===cssLanguageExtTypes_1.LESSScanner;return this._scanner.constructor===cssLanguageExtTypes_1.SCSSScanner?"scss":e?"less":"css"}}exports.ExtTokenHandler=ExtTokenHandler;