"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const path_1=require("path"),vscode=require("vscode"),cachedResponse_1=require("./tsServer/cachedResponse"),dispose_1=require("./utils/dispose"),fileSchemes=require("./utils/fileSchemes"),validateSetting="validate.enable",suggestionSetting="suggestionActions.enabled";class LanguageProvider extends dispose_1.Disposable{constructor(e,i,t,s,n,r,a){super(),this.client=e,this.description=i,this.commandManager=t,this.telemetryReporter=s,this.typingsStatus=n,this.fileConfigurationManager=r,this.onCompletionAccepted=a,vscode.workspace.onDidChangeConfiguration(this.configurationChanged,this,this._disposables),this.configurationChanged(),e.onReady((()=>this.registerProviders()))}get documentSelector(){const e=[],i=[];for(const t of this.description.modeIds){i.push({language:t});for(const i of fileSchemes.semanticSupportedSchemes)e.push({language:t,scheme:i})}return{semantic:e,syntax:i}}async registerProviders(){const e=this.documentSelector,i=new cachedResponse_1.CachedResponse;await Promise.all([Promise.resolve().then((()=>require("./languageFeatures/completions"))).then((i=>this._register(i.register(e,this.description.id,this.client,this.typingsStatus,this.fileConfigurationManager,this.commandManager,this.telemetryReporter,this.onCompletionAccepted)))),Promise.resolve().then((()=>require("./languageFeatures/definitions"))).then((i=>this._register(i.register(e,this.client)))),Promise.resolve().then((()=>require("./languageFeatures/documentSymbol"))).then((t=>this._register(t.register(e,this.client,i)))),Promise.resolve().then((()=>require("./languageFeatures/formatting"))).then((i=>this._register(i.register(e,this.description.id,this.client,this.fileConfigurationManager)))),Promise.resolve().then((()=>require("./languageFeatures/hover"))).then((i=>this._register(i.register(e,this.client)))),Promise.resolve().then((()=>require("./languageFeatures/quickFix"))).then((i=>this._register(i.register(e,this.client,this.fileConfigurationManager,this.commandManager,this.client.getDiagnosticsManager(this.id),this.telemetryReporter)))),Promise.resolve().then((()=>require("./languageFeatures/references"))).then((i=>this._register(i.register(e,this.client)))),Promise.resolve().then((()=>require("./languageFeatures/signatureHelp"))).then((i=>this._register(i.register(e,this.client))))])}configurationChanged(){const e=vscode.workspace.getConfiguration(this.id,null),i=0!==this.description.diagnosticLanguage;this.updateValidate(e.get(validateSetting,i)),this.updateSuggestionDiagnostics(e.get(suggestionSetting,i))}handles(e,i){if(i&&this.description.modeIds.indexOf(i.languageId)>=0)return!0;const t=(0,path_1.basename)(e.fsPath);return!!t&&!!this.description.configFilePattern&&this.description.configFilePattern.test(t)}get id(){return this.description.id}get diagnosticSource(){return this.description.diagnosticSource}updateValidate(e){this.client.getDiagnosticsManager(this.id).setValidate(this._diagnosticLanguage,e)}updateSuggestionDiagnostics(e){this.client.getDiagnosticsManager(this.id).setEnableSuggestions(this._diagnosticLanguage,e)}reInitialize(){this.client.getDiagnosticsManager(this.id).reInitialize()}triggerAllDiagnostics(){this.client.bufferSyncSupport.requestAllDiagnostics()}diagnosticsReceived(e,i,t){const s=vscode.workspace.getConfiguration(this.id,i),n=s.get("showUnused",!0),r=s.get("showDeprecated",!0);let a=t.filter((e=>!(!n&&e.reportUnnecessary&&e.severity===vscode.DiagnosticSeverity.Hint)&&(!(!r&&e.reportDeprecated&&e.severity===vscode.DiagnosticSeverity.Hint)&&e.severity!==vscode.DiagnosticSeverity.Information)));if("vue"===this.id){this.client.getDiagnosticsManager("vue").updateDiagnostics(i,2,e,a.filter((e=>"html"===e.source))),this.client.getDiagnosticsManager("css").updateDiagnostics(i,3,e,a.filter((e=>"css"===e.source)));let t=a.filter((e=>"html"!==e.source&&"css"!==e.source));this.client.getDiagnosticsManager("typescript").updateDiagnostics(i,1,e,t.filter((e=>".ts"===e.source))),this.client.getDiagnosticsManager("javascript").updateDiagnostics(i,0,e,t.filter((e=>".js"===e.source)))}else this.client.getDiagnosticsManager(this.id).updateDiagnostics(i,this._diagnosticLanguage,e,a)}configFileDiagnosticsReceived(e,i){this.client.getDiagnosticsManager(this.id).configFileDiagnosticsReceived(e,i)}get _diagnosticLanguage(){return this.description.diagnosticLanguage}}exports.default=LanguageProvider;