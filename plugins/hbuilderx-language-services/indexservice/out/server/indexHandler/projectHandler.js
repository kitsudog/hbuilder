"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ProjectHandler=void 0;const fs=require("fs-extra"),md5=require("md5"),path=require("path"),core_1=require("../../../../core"),fileData_1=require("./handlers/fileData"),fileTask_1=require("./handlers/fileTask"),fileVersion_1=require("./handlers/fileVersion"),indexUpdate_1=require("./indexUpdate");class ProjectHandler{constructor(e){this._projectVersion=0,this._update=indexUpdate_1.IndexUpdate.instance(),this._projectUri=e,this._fileVersion=new fileVersion_1.FileVersion,this._fileTask=new fileTask_1.FileTask(e),"darwin"===process.platform?(this._oldDiskPath=path.join(process.env.HOME||".","Library","Application Support","HBuilder X","indexdb"),this._newDiskPath=path.join(process.env.HOME||".","Library","Application Support","HBuilder X","newIndexDb")):(this._oldDiskPath=path.join(process.env.APPDATA||".","HBuilder X","indexdb"),this._newDiskPath=path.join(process.env.APPDATA||".","HBuilder X","newIndexDb")),fs.existsSync(this._newDiskPath)||fs.mkdirSync(this._newDiskPath),this._fileData=new fileData_1.FileData(e,this._fileVersion,this._oldDiskPath,this._newDiskPath),this.init()}get fileVersion(){return this._fileVersion}get fileTask(){return this._fileTask}get fileData(){return this._fileData}loadNewIndexData(){const e=this._projectUri,i=md5(e).toLowerCase(),t=path.join(this._newDiskPath,i);if(!fs.existsSync(t))return;return(0,core_1.loadNewIndexDataFromPath)(t)}loadOldIndexData(){const e=this._projectUri,i=md5(e).toLowerCase(),t=path.join(this._oldDiskPath,i);if(!fs.existsSync(t))return;return(0,core_1.loadOldIndexDataFromPath)(e,t)}initCreatedFileVersion(e){const i=this._fileVersion.gFileVersionCache;for(const t of e.kindMap.keys()){const s=e.kindMap.get(t);if(s)for(const e of s.keys()){const t=(0,core_1.noTsToNormalizedPath)(e);if(t&&fs.existsSync(t)||this._fileData.removeIndexDataFromUri(e),i.has(e))continue;const r=s.get(e);if(!r)continue;const n=r.fileVersion;i.set(e,n)}}}initCheckFileChanges(){const e=this._fileVersion.gFileVersionCache,i=this._projectUri;for(const t of e.keys()){const e=this._fileVersion.isFileVersionChange(t);e&&this._fileTask.setInitTaskCache(t,{fileUri:t,projectUri:i,isChanged:e})}}init(){let e=this.loadNewIndexData();if(e||(e=this.loadOldIndexData()),!e)return;this._fileData.setIndexData(e),this.initCreatedFileVersion(e),this.initCheckFileChanges();const i={indexProjectData:e,projectHandler:this};return this._update.doUpdate(i),e}}exports.ProjectHandler=ProjectHandler;