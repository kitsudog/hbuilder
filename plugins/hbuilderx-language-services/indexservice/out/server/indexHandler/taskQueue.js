"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.TaskQueue=void 0;const core_1=require("../../../../core"),indexUtils_1=require("./indexUtils"),priority_1=require("./priority"),processorsHandler_1=require("./processorsHandler");var TaskStatusFlag;!function(t){t[t.NotRunning=1]="NotRunning",t[t.Running=2]="Running"}(TaskStatusFlag||(TaskStatusFlag={}));class TaskQueue{static instance(t,e,s){return void 0===this._instance&&(this._instance=new TaskQueue(t,e,s)),this._instance}constructor(t,e,s){this._runCount=0,this._taskMap=new Map,this._taskList=[],this._delayAddCache=new Map,this._taskRunningState=TaskStatusFlag.NotRunning,this._stopTaskFlag=!1,this._priority=priority_1.Priority.instance(),this._documents=t,this._projectManager=s,this._ProcessorsHandler=new processorsHandler_1.ProcessorsHandler(t,e,s)}priorityChanged(t){if(this._priority.isChanged()){const e=this._priority.getRefList(t),s=(0,core_1.getReferenceList)(e),a=this._priority.getCurrentPriority();this.taskSort(s,a),this._priority.setChanged(!1)}}takeTask(t){if(this._taskMap.size!==this._taskList.length&&(this._taskList=[...new Set(this._taskList)]),0===this._taskList.length)return void console.log("[IndexServer] TaskListLength Is 0");const e=this._taskList.pop();if(!e)return void console.error(`[IndexServer] NoFile: ${e}`);if(!this._taskMap.has(e))return void console.error(`[IndexServer] TakeTask NoFile: ${e}`);const s=this._taskMap.get(e);if(this._taskMap.delete(e),!s)return;const a=t.getProjectHandler(s.projectUri);if(this.isFileVersionChange(s,a))return s;console.log("[IndexServer] NoFileVersionChange")}addTaskFromRefData(t,e,s){const a=this._priority.getRefListFromRefData(e,t);if(a){const e=(0,indexUtils_1.getTaskMapFromRef)(t,s);this.addTaskFromMap(e);const i=(0,core_1.getReferenceList)(a),r=this._priority.getCurrentPriority();this.taskSort(i,r)}}getFirstTaskMap(t){const e=t.fileTask.getFirstTaskMap();this.addTaskFromMap(e),this.checkUpdate(t)}checkUpdate(t){if(!t.fileTask.isUpdate)return;const e=t.fileTask.getTaskMap();this.addTaskFromMap(e),t.fileTask.setUpdate(!1)}async createdIndexData(t){let e;try{e=await this._ProcessorsHandler.createdIndexData(t.projectUri,t.fileUri)}catch(e){console.error(`[IndexServer] CreatedIndexDataError: ${e}, fileUri: ${t.fileUri}`)}if(e)return e}async startTask(){const t=this._projectManager;for(;0!==this._taskList.length;){await(0,core_1.hxSleep)(10),console.log(`[IndexServer] Count: ${this._runCount}`);try{if(this._stopTaskFlag){this._stopTaskFlag=!1;break}this.priorityChanged(t);const e=this.takeTask(t);if(!e)continue;const s=t.getProjectHandler(e.projectUri);this.getFirstTaskMap(s);const a=await this.createdIndexData(e);if(!a)continue;this._runCount++,s.fileData.updateIndexData(e.fileUri,a),this.addTaskFromRefData(t,a,e)}catch(t){console.error(`[IndexServer] StartTask Error! Error: ${t}`)}}console.log("[IndexServer] TaskStatusFlag Set NotRunning"),this._taskRunningState=TaskStatusFlag.NotRunning,this._projectManager.forceSave()}isFileVersionChange(t,e){if(t.isChanged)return!0;return e.fileVersion.isFileVersionChange(t.fileUri)}taskSort(t,e){const s=this._taskList;let a=s.filter((t=>{if(!t.startsWith(e.projectUri))return t})),i=s.filter((t=>{if(t.startsWith(e.projectUri))return t}));t||(t=[]),t.push(e.fileUri),t.forEach((t=>{i=i.sort((e=>e===t?-1:1))})),i=i.reverse(),a.push(...i),this._taskList=a}autoStartTask(){this._taskRunningState!==TaskStatusFlag.Running&&this.startTask()}addTask(t,e){this._taskMap.set(t,e),this._taskList.push(t),this.autoStartTask()}delayAddTask(t,e,s){const a={fileUri:e,projectUri:t,isChanged:!0};if(s<=0)this.addTask(t,a);else{if(this._delayAddCache.has(e)){let t=this._delayAddCache.get(e);clearTimeout(t),this._delayAddCache.delete(e)}this._delayAddCache.set(e,setTimeout((()=>{this._delayAddCache.has(e)&&(this._delayAddCache.delete(e),this.addTask(t,a))}),s))}}addTaskFromMap(t){t&&0!==t.size&&t.forEach(((t,e)=>{this.addTask(e,t)}))}deleteTaskFromUriList(t){if(0===t.length)return;const e=[];for(const s of t)for(const t of this._taskMap.keys())this._taskMap.has(t)&&t.startsWith(s)&&e.push(t);e.forEach((t=>{this._taskMap.delete(t)}))}async stopTask(){console.log("[IndexServer] SetStopTaskFlag"),this._stopTaskFlag=!0;for(;this._taskRunningState===TaskStatusFlag.Running;)await(0,core_1.hxSleep)(10)}async startTaskSync(t){const e=Date.now();for(let e of t.keys()){if(!t.has(e))continue;const s=t.get(e);if(!s)continue;const a=this._projectManager.getProjectHandler(s.projectUri),i=await this.createdIndexData(s);i&&a.fileData.updateIndexData(s.fileUri,i)}const s=Date.now();console.log(`[IndexServer] 函数: [startTaskSync] 执行时间：${s-e}ms`)}getTaskFromProject(t,e){const s=new Map;let a=[];for(const e of this._taskMap.keys()){if(!this._taskMap.has(e))continue;const i=this._taskMap.get(e);i&&(i.projectUri===t&&(s.set(e,i),a.push(e)))}if(0!==s.size)return e&&a.forEach((t=>{this._taskMap.delete(t)})),s}}exports.TaskQueue=TaskQueue;