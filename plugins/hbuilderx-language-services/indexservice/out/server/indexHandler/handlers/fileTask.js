"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.FileTask=void 0;const fs=require("fs-extra"),path=require("path"),core_1=require("../../../../../core"),indexUtils_1=require("../indexUtils");function getTraverseFolderFilterOption(){return{filter:core_1.indexFilterDirs,timeOut:-1,maximum:-1}}class FileTask{constructor(e){this._projectUri=e,this._initTaskCache=new Map,this._taskCache=new Map,this._isFirstGetInitMap=!0,this._isFirstGetMap=!0,this._isUpdate=!1}get isFirstGetMap(){return this._isFirstGetMap}get isUpdate(){return this._isUpdate}setUpdate(e){this._isUpdate=e}setInitTaskCache(e,t){this._isFirstGetInitMap||(this._isFirstGetInitMap=!0),this._initTaskCache.set(e,t)}getTaskMapFromFolder(e){this._taskCache.clear();const t=getTraverseFolderFilterOption(),i=(0,core_1.noTsToNormalizedPath)(this._projectUri);if(!i)return new Map;const s=(0,core_1.noTsToNormalizedPath)(e);return s?(this.traverseFolder(i,s,t),this._taskCache):new Map}getTaskMap(){return this.getTaskMapFromFolder(this._projectUri)}getTaskMapFromInit(){return this._isFirstGetInitMap?(this._isFirstGetInitMap=!1,this._initTaskCache):new Map}getFirstTaskMap(){const e=this.getTaskMapFromInit();let t=new Map;return this._isFirstGetMap&&(this._isFirstGetMap=!1,t=this.getTaskMap()),(0,indexUtils_1.mergeTaskMap)(e,t)}createTaskData(e){let t=!1;for(const i of core_1.indexFileSuffix)if(e.endsWith(i)){t=!0;break}if(!t)return!1;if(fs.statSync(e).size>core_1.indexMaxFileSize)return!1;const i=(0,core_1.noTsToNormalizedUri)(e);if(!i)return!1;const s=this._projectUri;return this._taskCache.set(i,{fileUri:i,projectUri:s,isChanged:!1}),!0}traverseFolder(e,t,i){if(!fs.existsSync(e))return;let s=[t],r=0;const a=(new Date).getTime();for(console.log(`[IndexServer]: traverseFolder() Start! Time: ${a}`);s.length>0;){if((new Date).getTime()-a>i.timeOut&&-1!==i.timeOut)break;if(r>i.maximum&&-1!==i.maximum)break;let e=s.pop();if(!e)continue;if(!fs.existsSync(e))continue;const t=fs.readdirSync(e,{withFileTypes:!0});for(const a of t){if(i.filter.includes(a.name))continue;const t=path.join(e,a.name);fs.existsSync(t)&&(a.isDirectory()?s.push(t):a.isFile()&&this.createTaskData(t)&&r++)}}console.log(`[IndexServer]: traverseFolder() End! Time: ${(new Date).getTime()}, FileCount: ${r}`)}}exports.FileTask=FileTask;