"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Logger=void 0;const vscode_languageserver_1=require("vscode-languageserver");var LogLevel;!function(e){e.Off="off",e.Normal="normal",e.Terse="terse",e.Verbose="verbose"}(LogLevel||(LogLevel={}));class Logger{constructor(e,s){this.logLevel=LogLevel.Off,this.logType=[],this.connection=e,this.logLevel=s["logger.logLevel"],this.logType=s["logger.logType"]}error(e){this.logType.includes("error")&&this.send(vscode_languageserver_1.MessageType.Error,e)}warn(e){this.logType.includes("warn")&&this.send(vscode_languageserver_1.MessageType.Warning,e)}info(e){this.logType.includes("info")&&this.send(vscode_languageserver_1.MessageType.Info,e)}log(e){this.logType.includes("log")&&this.send(vscode_languageserver_1.MessageType.Log,e)}send(e,s){if(this.logLevel===LogLevel.Off)return;const o=this.getStackTrace();this.connection&&this.connection.sendNotification(vscode_languageserver_1.LogMessageNotification.type,{type:e,message:`${s}${o}`})}getStackTrace(){if(this.logLevel===LogLevel.Off)return"";try{throw new Error("Dummy error for stack trace")}catch(e){const s=e.stack;switch(this.logLevel){case LogLevel.Normal:return null==s?void 0:s.split("\n")[1];case LogLevel.Terse:return null==s?void 0:s.split("\n").slice(1,3).join("\n");case LogLevel.Verbose:default:return s}}}}exports.Logger=Logger;