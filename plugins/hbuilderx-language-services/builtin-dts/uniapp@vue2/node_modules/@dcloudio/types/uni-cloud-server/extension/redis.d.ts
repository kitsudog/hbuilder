declare namespace UniCloudNamespace {
  interface RedisCommands {
    /**
     * Watch the given keys to determine execution of the MULTI/EXEC block.
     */
    watch: (result: any) => void;
    /**
     * Adds the specified elements to the specified HyperLogLog.
     */
    pfadd: (result: any) => void;
    /**
     * Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).
     */
    pfcount: (result: any) => void;
    /**
     * Merge N different HyperLogLogs into a single one.
     */
    pfmerge: (result: any) => void;
    /**
     * Inspect the state of the Pub/Sub subsytem.
     */
    pubsub: (result: any) => void;
    /**
     * Get information and statistics about the server.
     */
    info(): Promise<any>;
    info(section: any): Promise<any>;
    /**
     * Ping the server.
     */
    ping(callback: (result: any) => void): Promise<any>;
    ping(message: string, callback: (result: any) => void): Promise<any>;
    /**
     * Post a message to a channel.
     */
    publish(channel: string, value: string): Promise<any>;
    /**
     * Append a value to a key.
     */
    append(key: string, value: string): Promise<any>;
    /**
     * Asynchronously rewrite the append-only file.
     */
    bgrewriteaof(): Promise<any>;
    /**
     * Asynchronously save the dataset to disk.
     */
    bgsave(): Promise<any>;
    /**
     * Count set bits in a string.
     */
    bitcount(key: string): Promise<any>;
    bitcount(key: string, start: number, end: number): Promise<any>;
    /**
     * Perform bitwise operations between strings.
     */
    bitop(operation: string, destkey: string, key1: string, key2: string, key3: string): Promise<any>;
    bitop(operation: string, destkey: string, key1: string, key2: string): Promise<any>;
    bitop(operation: string, destkey: string, key: string): Promise<any>;
    bitop(operation: string, destkey: string, args: any[]): Promise<any>;
    /**
     * Find first bit set or clear in a string.
     */
    bitpos(key: string, bit: number, start: number, end: number): Promise<any>;
    bitpos(key: string, bit: number, start: number): Promise<any>;
    bitpos(key: string, bit: number): Promise<any>;
    /**
     * Pop a value from a list, push it to another list and return it; or block until one is available.
     */
    brpoplpush(source: string, destination: string, timeout: number): Promise<any>;
    /**
     * Return the number of keys in the selected database.
     */
    dbsize(): Promise<any>;
    /**
     * 指定键减一
     */
    decr(key: string): Promise<any>;
    /**
     * 指定键减去传入的整数
     */
    decrby(key: string, decrement: number): Promise<any>;
    /**
     * Discard all commands issued after MULTI.
     */
    discard(): Promise<any>;
    /**
     * Return a serialized version of the value stored at the specified key.
     */
    dump(key: string): Promise<any>;
    /**
     * Echo the given string.
     */
    echo(message: any): Promise<any>;
    /**
     * 设置指定键的剩余过期时间，单位：秒
     */
    expire(key: string, seconds: number): Promise<any>;
    /**
     * 设置指定键的过期时间，timestamp为单位为秒的时间戳
     */
    expireat(key: string, timestamp: number): Promise<any>;
    /**
     * Remove all keys from all databases.
     */
    flushall(): Promise<any>;
    flushall(async: any): Promise<any>;
    /**
     * Remove all keys from the current database.
     */
    flushdb(): Promise<any>;
    flushdb(async: any): Promise<any>;
    /**
     * 获取指定键的值
     */
    get(key: string): Promise<any>;
    /**
     * Returns the bit value at offset in the string value stored at key.
     */
    getbit(key: string, offset: number): Promise<any>;
    /**
     * Get a substring of the string stored at a key.
     */
    getrange(key: string, start: number, end: number): Promise<any>;
    /**
     * 为指定键设置值并返回旧值
     */
    getset(key: string, value: string): Promise<any>;
    /**
     * 判断一个hash是否存在
     */
    hexists(key: string, field: string): Promise<any>;
    /**
     * 获取hash内指定field的值
     */
    hget(key: string, field: string): Promise<any>;
    /**
     * 以对象形式返回hash所有的键值对
     */
    hgetall(key: string): Promise<any>;
    /**
     * 为hash内指定field加一个整数
     */
    hincrby(key: string, field: string, increment: number): Promise<any>;
    /**
     * 为hash内指定field加一个浮点数
     */
    hincrbyfloat(key: string, field: string, increment: number): Promise<any>;
    /**
     * 获取hasd所有的field名
     */
    hkeys(key: string): Promise<any>;
    /**
     * 获取hash内field的数量
     */
    hlen(key: string): Promise<any>;
    /**
     * hash内field不存在时为其设定一个值
     */
    hsetnx(key: string, field: string, value: string): Promise<any>;
    /**
     * 获取hash内指定field的字符串长度
     */
    hstrlen(key: string, field: string): Promise<any>;
    /**
     * 获取hash内所有的值
     */
    hvals(key: string): Promise<any>;
    /**
     * 为指定的键加一
     */
    incr(key: string): Promise<any>;
    /**
     * 为指定的键加一个整数
     */
    incrby(key: string, increment: number): Promise<any>;
    /**
     * 为指定的键加一个浮点数
     */
    incrbyfloat(key: string, increment: number): Promise<any>;
    /**
     * Find all keys matching the given pattern.
     */
    keys(pattern: string): Promise<any>;
    /**
     * Get the UNIX time stamp of the last successful save to disk.
     */
    lastsave(): Promise<any>;
    /**
     * 获取list内指定下标的值
     */
    lindex(key: string, index: number): Promise<any>;
    /**
     * 在list内匹配到的元素前或后插入值
     */
    linsert(key: string, dir: string, pivot: string, value: string): Promise<any>;
    /**
     * 获取list的长度
     */
    llen(key: string): Promise<any>;
    /**
     * 从list开头移除一个值并返回移除的值
     */
    lpop(key: string): Promise<any>;
    /**
     * 在list开头追加一个值并返回追
     */
    lpushx(key: string, value: string): Promise<any>;
    /**
     * 指定起始下标和结束下标获取数据
     */
    lrange(key: string, start: number, stop: number): Promise<any[]>;
    /**
     * 从存于 key 的列表里移除前 count 次出现的值为 value 的元素。 count > 0: 从头往尾移除值为 value 的元素。 count < 0: 从尾往头移除值为 value 的元素。 count = 0: 移除所有值为 value 的元素。
     */
    lrem(key: string, count: number, value: string): Promise<any>;
    /**
     * 设置 index 位置的list元素的值为 value
     */
    lset(key: string, index: number, value: string): Promise<any>;
    /**
     * 修剪(trim)一个已存在的 list，这样 list 就会只包含指定范围的指定元素
     */
    ltrim(key: string, start: number, stop: number): Promise<any>;
    /**
     * 移除指定key的过期时间
     */
    persist(key: string): Promise<any>;
    /**
     * 以毫秒为单位设置 key 的生存时间
     */
    pexpire(key: string, milliseconds: number): Promise<any>;
    /**
     * 以毫秒为单位设置 key 的过期 unix 时间戳
     */
    pexpireat(key: string, millisecondsTimestamp: number): Promise<any>;
    /**
     * 设置key对应字符串value，并且设置key在给定的milliseconds（毫秒）时间之后超时过期
     */
    psetex(key: string, milliseconds: number, value: string): Promise<any>;
    /**
     * 返回指定key的剩余毫秒数
     */
    pttl(key: string): Promise<any>;
    /**
     * Close the connection.
     */
    quit(): Promise<any>;
    /**
     * 从当前数据库返回一个随机的key
     */
    randomkey(): Promise<any>;
    /**
     * Enables read queries for a connection to a cluster slave node.
     */
    readonly(): Promise<any>;
    /**
     * Disables read queries for a connection to cluster slave node.
     */
    readwrite(): Promise<any>;
    /**
     * 重命名一个键
     */
    rename(key: string, newkey: string): Promise<any>;
    /**
     * 当且仅当 newkey 不存在时，将 key 改名为 newkey
     */
    renamenx(key: string, newkey: string): Promise<any>;
    /**
     * Create a key using the provided serialized value, previously obtained using DUMP.
     */
    restore(key: string, ttl: number, serializedValue: string): Promise<any>;
    /**
     * Return the role of the instance in the context of replication.
     */
    role(): Promise<any>;
    /**
     * 移除并返回存于 key 的 list 的最后一个元素。
     */
    rpop(key: string): Promise<any>;
    /**
     * 原子性地返回并移除存储在 source 的列表的最后一个元素（列表尾部元素）， 并把该元素放入存储在 destination 的列表的第一个元素位置（列表头部）
     */
    rpoplpush(source: string, destination: string): Promise<any>;
    /**
     * 将值 value 插入到列表 key 的表尾, 当且仅当 key 存在并且是一个列表
     */
    rpushx(key: string, value: string): Promise<any>;
    /**
     * 返回集合存储的key的基数
     */
    scard(key: string): Promise<any>;
    /**
     * 将键key设定为指定的“字符串”值。如果 key 已经保存了一个值，那么这个操作会直接覆盖原来的值，并且忽略原始类型。当set命令执行成功之后，之前设置的过期时间都将失效
     */
    set(key: string, value: string, mode: string, duration: number, flag: string): Promise<any>;
    /**
     * Sets or clears the bit at offset in the string value stored at key.
     */
    setbit(key: string, offset: number, value: string): Promise<any>;
    /**
     * 设置key对应字符串value，并且设置key在给定的seconds时间之后超时过期
     */
    setex(key: string, seconds: number, value: string): Promise<any>;
    /**
     * 将key设置值为value，如果key不存在
     */
    setnx(key: string, value: string): Promise<any>;
    /**
     * Overwrite part of a string at key starting at the specified offset.
     */
    setrange(key: string, offset: number, value: string): Promise<any>;
    /**
     * 返回成员 member 是否是存储的集合 key的成员
     */
    sismember(key: string, member: string): Promise<any>;
    /**
     * 返回key集合所有的元素
     */
    smembers(key: string): Promise<any>;
    /**
     * 将member从source集合移动到destination集合中
     */
    smove(source: string, destination: string, member: string): Promise<any>;
    /**
     * 从存储在key的集合中移除并返回一个或多个随机元素。
     */
    spop(key: string, count: number): Promise<any>;
    /**
     * 随机返回key集合中的一个或多个元素
     */
    srandmember(key: string, count: number): Promise<any>;
    /**
     * 返回key的string类型value的长度
     */
    strlen(key: string): Promise<any>;
    /**
     * Internal command used for replication.
     */
    sync(): Promise<any>;
    /**
     * Return the current server time.
     */
    time(): Promise<any>;
    /**
     * 返回key剩余的过期时间。单位：秒
     */
    ttl(key: string): Promise<any>;
    /**
     * 返回key所存储的value的数据结构类型，它可以返回string, list, set, zset 和 hash等不同的类型
     */
    type(key: string): Promise<any>;
    /**
     * Forget about all watched keys.
     */
    unwatch(): Promise<any>;
    /**
     * Wait for the synchronous replication of all the write commands sent in the context of the current connection.
     */
    wait(numslaves: number, timeout: number): Promise<any>;
    /**
     * 返回key的有序集元素个数
     */
    zcard(key: string): Promise<any>;
    /**
     * 返回有序集key中，score值在min和max之间(默认包括score值等于min或max)的成员
     */
    zcount(key: string, min: any, max: any): Promise<any>;
    /**
     * 为有序集key的成员member的score值加上增量increment
     */
    zincrby(key: string, increment: number, member: string): Promise<any>;
    /**
     * 返回有序集合中指定成员之间的成员数量
     */
    zlexcount(key: string, min: string, max: string): Promise<any>;
    /**
     * 返回存储在有序集合key中的指定范围的元素
     */
    zrange(key: string, start: number, stop: number, withscores: string): Promise<any>;
    /**
     * 返回指定成员区间内的成员，按成员字典正序排序, 分数必须相同
     */
    zrangebylex(key: string, min: string, max: string, limit: string, offset: number, count: number): Promise<any>;
    /**
     * 返回指定成员区间内的成员，按成员字典倒序排序, 分数必须相同
     */
    zrevrangebylex(key: string, min: string, max: string, limit: string, offset: number, count: number): Promise<any>;
    /**
     * 指定分数范围的元素列表
     */
    zrangebyscore(key: string, min: any, max: any, withscores: string, limit: string, offset: number, count: number): Promise<any>;
    /**
     * 返回有序集key中成员member的排名
     */
    zrank(key: string, member: string): Promise<any>;
    /**
     * Remove all members in a sorted set between the given lexicographical range.
     */
    zremrangebylex(key: string, min: string, max: string): Promise<any>;
    /**
     * Remove all members in a sorted set within the given indexes.
     */
    zremrangebyrank(key: string, start: number, stop: number): Promise<any>;
    /**
     * Remove all members in a sorted set within the given indexes.
     */
    zremrangebyscore(key: string, min: any, max: any): Promise<any>;
    /**
     * Return a range of members in a sorted set, by index, with scores ordered from high to low.
     */
    zrevrange(key: string, start: number, stop: number, withscores: string): Promise<any>;
    /**
     * Return a range of members in a sorted set, by score, with scores ordered from high to low.
     */
    zrevrangebyscore(key: string, min: any, max: any, withscores: string, limit: string, offset: number, count: number): Promise<any>;
    /**
     * Determine the index of a member in a sorted set, with scores ordered from high to low.
     */
    zrevrank(key: string, member: string): Promise<any>;
    /**
     * 返回有序集key中，成员member的score值。
     */
    zscore(key: string, member: string): Promise<any>;
    /**
     * 设置 key 指定的哈希集中指定字段的值
     */
    hmset(key: string, field1: string, value1: string, field2: string, value2: string): Promise<any>;
    /**
     * Perform arbitrary bitfield integer operations on strings.
     */
    bitfield(key: string, type: string, value: string): Promise<any>;
    /**
     * Remove and get the first element in a list, or block until one is available.
     */
    blpop(key: string, timeout: number): Promise<any>;
    /**
     * Remove and get the last element in a list, or block until one is available.
     */
    brpop(key: string, timeout: number): Promise<any>;
    /**
     * Remove and get the last element in a list, or block until one is available.
     */
    brpop(key: string, timeout: number): Promise<any>;
    /**
     * 删除key
     */
    del(key: string): Promise<any>;
    /**
     * 执行lua脚本
     */
    eval(command: string): Promise<any>;
    /**
     * 根据给定的 SHA1 校验码，对缓存在服务器中的脚本进行求值
     */
    evalsha(command: string): Promise<any>;
    /**
     * 返回key是否存在
     */
    exists(key: string): Promise<number>;
    /**
     * Add one or more geospatial items in the geospatial index represented using a sorted set.
     */
    geoadd(key: string, longitude: number, latitude: number, member: string): Promise<number>;
    /**
     * Returns members of a geospatial index as standard geohash strings.
     */
    geohash(key: string, member: string): Promise<any[]>;
    /**
     * Returns longitude and latitude of members of a geospatial index.
     */
    geopos(key: string, member: string): Promise<any[]>;
    /**
     * Returns the distance between two members of a geospatial index.
     */
    geodist(key: string, member1: string, member2: string): Promise<string>;
    /**
     * Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point.
     */
    georadius(key: string, longitude: number, latitude: number, radius: number, unit: string): Promise<any[]>;
    /**
     * Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member.
     */
    georadiusbymember(key: string, member: string, radius: number, unit: string): Promise<any[]>;
    /**
     * 从 key 指定的哈希集中移除指定的域
     */
    hdel(key: string, field: string): Promise<number>;
    /**
     * 返回 key 指定的哈希集中指定字段的值
     */
    hmget(key: string, field: string): Promise<any[]>;
    /**
     * 设置 key 指定的哈希集中指定字段的值
     */
    hset(key: string, field: string, value: string): Promise<number>;
    /**
     * 将所有指定的值插入到存于 key 的列表的头部
     */
    lpush(key: string, value: string): Promise<number>;
    /**
     * 返回所有指定的key的value
     */
    mget(key1: string, key2: string): Promise<any[]>;
    /**
     * 对应给定的keys到他们相应的values上
     */
    mset(key1: string, value1: string, key2: string, value2: string): Promise<string>;
    /**
     * 对应给定的keys到他们相应的values上。只要有一个key已经存在，MSETNX一个操作都不会执行
     */
    msetnx(key1: string, value1: string, key2: string, value2: string): Promise<string>;
    /**
     * 向存于 key 的列表的尾部插入所有指定的值。
     */
    rpush(key: string, value: string): Promise<string>;
    /**
     * 添加一个或多个指定的member元素到集合的 key中.指定的一个或者多个元素member 如果已经在集合key中存在则忽略.如果集合key 不存在，则新建集合key，并添加member元素到集合key中
     */
    sadd(key: string, member: string): Promise<string>;
    /**
     * 返回一个集合与给定集合的差集的元素.
     */
    sdiff(key1: string, key2: string): Promise<string>;
    /**
     * 将两个集合的差集存储在destination内
     */
    sdiffstore(destination: string, key1: string, key2: string): Promise<string>;
    /**
     * 返回一个集合与给定集合的交集的元素
     */
    sinter(key1: string, key2: string): Promise<string>;
    /**
     * 将两个集合的交集存储在destination内
     */
    sinterstore(destination: string, key1: string, key2: string): Promise<string>;
    /**
     * Manages the Redis slow queries log.
     */
    slowlog(subcommand: string): Promise<string>;
    /**
     * 返回或存储key的list、 set 或sorted set 中的元素。默认是按照数值类型排序的，并且按照两个元素的双精度浮点数类型值进行比较。
     */
    sort(key: string): Promise<string>;
    /**
     * 在key集合中移除指定的元素
     */
    srem(key: string, member: string): Promise<number>;
    /**
     * 返回一个集合与给定集合的并集的元素
     */
    sunion(key1: string, key2: string): Promise<any[]>;
    /**
     * 将两个集合的并集存储在destination内
     */
    sunionstore(destination: string, key1: string, key2: string): Promise<number>;
    /**
     * 非阻塞式删除指定的key
     */
    unlink(key: string): Promise<number>;
    /**
     * 将所有指定成员添加到键为key有序集合（sorted set）里面
     */
    zadd(key: string, score: string, member: string): Promise<number>;
    /**
     * 计算给定的numkeys个有序集合的交集，并且把结果放到destination中
     */
    zinterstore(destination: string, numkeys: string, key: string): Promise<number>;
    /**
     * 计算给定的numkeys个有序集合的并集，并且把结果放到destination中
     */
    zunionstore(destination: string, numkeys: string, key: string): Promise<number>;
    /**
     * 从有序集合中删除的成员
     */
    zrem(key: string, member: string): Promise<number>;
    /**
     * 传入游标迭代所有key
     */
    scan(cursor: number): Promise<any[]>;
    /**
     * 传入游标迭代集合所有元素
     */
    sscan(key: string, cursor: number): Promise<any[]>;
    /**
     * 传入游标迭代hash所有key-value
     */
    hscan(key: string, cursor: number): Promise<any[]>;
    /**
     * 传入游标迭代有序集合所有元素及分数
     */
    zscan(key: string, cursor: number): Promise<any[]>;
  }

  interface Multi {
    exec(): any[];
  }

  interface RedisClient extends RedisCommands {
    // on(event: string, listener: (result: any) => void): any;
    // end(flush: boolean): void;
    multi(args?: any[]): Multi;
    batch(args?: any[]): Multi;
  }

  interface UniCloud {
    /**
     * 返回redis实例
     *
     * 文档: [https://uniapp.dcloud.io/uniCloud/redis](https://uniapp.dcloud.io/uniCloud/redis)
     */
    redis(): RedisClient;
  }
}
