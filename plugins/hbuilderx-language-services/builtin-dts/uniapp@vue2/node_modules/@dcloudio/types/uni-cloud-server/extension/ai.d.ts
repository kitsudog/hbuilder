declare namespace UniCloudNamespace {

  namespace UniCloudAIProviderConfig {
    interface SharedAIOptions {
      appId?: string;
    }
    interface BaiduOptions extends SharedAIOptions {
      /**
       * 文心一言accessToken，如何获取请参考：[百度AI鉴权认证机制](https://ai.baidu.com/ai-doc/REFERENCE/Ck3dwjhhu)
       */
      accessToken?: string;
    }

    interface OpenAIOptions extends SharedAIOptions {
      /**
       * openai接口代理
       */
      proxy?: string;
      /**
       * openai api key
       */
      apiKey?: string;
    }

    interface AzureOptions extends SharedAIOptions {
      /**
       * azure api key
       */
      apiKey?: string;
      /**
       * azure endpoint
       */
      endpoint?: string;
    }

    interface MiniMaxOptions extends SharedAIOptions {
      groupId?: string;
      apiKey?: string;
    }

    interface GetMinimaxManagerOptions extends MiniMaxOptions {
      provider: 'minimax';
    }
    interface GetOpenAIManagerOptions extends OpenAIOptions {
      provider: 'openai';
    }
    interface GetAzureManagerOptions extends AzureOptions {
      provider: 'azure';
    }
    interface GetBaiduManagerOptions extends BaiduOptions {
      provider: 'baidu';
    }
  }

  namespace UniCloudAILLM {
    type GetLLMManagerOptions = UniCloudAIProviderConfig.GetMinimaxManagerOptions |
      UniCloudAIProviderConfig.GetOpenAIManagerOptions |
      UniCloudAIProviderConfig.GetAzureManagerOptions |
      UniCloudAIProviderConfig.GetBaiduManagerOptions;
    type Role = 'system' | 'user' | 'assistant';
    interface Message {
      role: Role;
      content: string;
    }
    interface Choice {
      message: Message;
      finishReason?: 'stop' | 'length' | 'index';
    }
    interface ChatResult {
      id: string;
      reply: string;
      choices?: Array<Choice>;
      usage: {
        promptTokens?: number;
        completionTokens?: number;
        totalTokens?: number;
      };
    }

    interface DCloudChatResult {
      errCode: number;
    }

    interface ChatCompletionOptions {
      /**
       * 对话内容
       */
      messages: Array<Message>;
      /**
       * 最大生成token数，需要注意的是，这个参数并不会影响模型本身的生成效果，而是仅仅通过以截断超出的token的方式来实现功能需要保证输入上文的 token 个数和这个值加一起小于 4096，否则请求会失败
       */
      tokensToGenerate?: number;
      /**
       * 较高的值将使输出更加随机，而较低的值将使输出更加集中和确定。建议temperature和topP同时只调整其中一个
       */
      temperature?: number;
      /**
       * 采样方法，数值越小结果确定性越强；数值越大，结果越随机
       */
      topP?: number;
      /**
       * 模型名称
       */
      model?: string;
      /**
       * azure部署id
       */
      deploymentId?: string;
      /**
       * 云函数与客户端的消息通道
       */
      sseChannel: any;
    }

    interface LLMChatStream {
      /**
       * 添加消息接收事件监听器
       */
      on(event: 'message', callback: (message?: string) => any): void;
      /**
       * 添加消息行事件监听器
       */
      on(event: 'line', callback: (line?: string) => any): void;
      /**
       * 添加消息完毕事件监听器
       */
      on(event: 'end', callback: () => any): void;
      /**
       * 添加错误事件监听器
       */
      on(event: 'error', callback: (err?: any) => any): void;

      /**
       * 添加消息接收事件监听器
       */
      addListener(event: 'message', callback: (message?: string) => any): void;
      /**
       * 添加消息行事件监听器
       */
      addListener(event: 'line', callback: (line?: string) => any): void;
      /**
       * 添加消息完毕事件监听器
       */
      addListener(event: 'end', callback: () => any): void;
      /**
       * 添加错误事件监听器
       */
      addListener(event: 'error', callback: (err?: any) => any): void;

      /**
       * 移除消息接收事件监听器
       */
      off(event: 'message', callback: (message?: string) => any): void;
      /**
       * 移除消息行事件监听器
       */
      off(event: 'line', callback: (line?: string) => any): void;
      /**
       * 移除消息完毕事件监听器
       */
      off(event: 'end', callback: () => any): void;
      /**
       * 移除错误事件监听器
       */
      off(event: 'error', callback: (err?: any) => any): void;

      /**
       * 移除消息接收事件监听器
       */
      removeListener(event: 'message', callback: (message?: string) => any): void;
      /**
       * 移除消息行事件监听器
       */
      removeListener(event: 'line', callback: (line?: string) => any): void;
      /**
       * 移除消息完毕事件监听器
       */
      removeListener(event: 'end', callback: () => any): void;
      /**
       * 移除错误事件监听器
       */
      removeListener(event: 'error', callback: (err?: any) => any): void;

      /**
       * 移除指定事件的所有监听器
       */
      removeAllListener(event: 'message' | 'line' | 'end' | 'error'): void;
    }

    class LLMManager {
      constructor(options: GetLLMManagerOptions);
      /**
       * 对话
       *
       * 文档：[https://uniapp.dcloud.net.cn/uniCloud/uni-ai.html#chat-completion](https://uniapp.dcloud.net.cn/uniCloud/uni-ai.html#chat-completion)
       */
      chatCompletion(options: ChatCompletionOptions): Promise<ChatResult | LLMChatStream | DCloudChatResult>;
    }
  }

  namespace UniCloudAIMedia {
    type GetMediaManagerOptions = UniCloudAIProviderConfig.GetBaiduManagerOptions;

    interface ImageGenerationOptions {
      /**
       * 生成图片用的提示词
       */
      prompt: string;
      /**
       * 分辨率，默认为1024*1024，百度v1接口支持以下分辨率：1024*1024、1024*1536、1536*1024，百度v2接口支持以下分辨率：512x512、640x360、360x640、1024x1024、720x1280、1280x720
       */
      resolution?: string;
      /**
       * 生成图片的数量，支持生成 1-8 张，默认生成1张
       */
      imageNum?: number;
    }

    interface BaiduImageGenerationV1Options extends ImageGenerationOptions {
      /**
       * 图片风格，v1版本接口必传此参数。
       */
      style: '探索无限' | '古风' | '二次元' | '写实风格' | '浮世绘' | 'low poly' | '未来主义' | '像素风格' | '概念艺术' | '赛博朋克' | '洛丽塔风格' | '巴洛克风格' | '超现实主义' | '水彩画' | '蒸汽波艺术' | '油画' | '卡通画';
    }

    interface BaiduImageGenerationV2Options extends ImageGenerationOptions {
      /**
       * 参考图base64
       */
      imageBase64?: string;
      /**
       * 参考图url
       */
      imageUrl?: string;
      /**
       * 参考pdf文件base64
       */
      pdfBase64?: string;
      /**
       * 参考pdf文件页码，默认为第一页
       */
      pdfPageNum?: string;
      /**
       * 参考图影响因子，支持 1-10 内；数值越大参考图影响越大
       */
      changeDegree?: number;
    }

    interface BaiduImageGenerationOptions extends BaiduImageGenerationV1Options, BaiduImageGenerationV2Options {
      /**
       * 接口版本号
       */
      version?: 1 | 2;
    }

    interface BaiduImageGenerationResult {
      /**
       * 任务id
       */
      taskId: number;
    }

    interface BaiduGetGeneratedImageOptions {
      /**
       * 接口版本号
       */
      version?: 1 | 2;
      /**
       * 任务id
       */
      taskId: number;
    }

    interface ImageItem {
      /**
       * 图片url
       */
      url?: string;
      /**
       * 图片安全审核状态，百度v1接口不返回此项
       */
      securityCheckResult?: 'block' | 'review' | 'pass';
    }

    interface BaiduGetGeneratedImageResult {
      /**
       * 任务执行状态
       */
      status: 'INIT' | 'WAIT' | 'RUNNING' | 'FAILED' | 'SUCCESS';
      /**
       * 图片列表
       */
      imgList?: ImageItem[];
    }
    class MediaManager {
      constructor(options: GetMediaManagerOptions);
      /**
       * 创建生成图片任务
       *
       * 文档：[https://uniapp.dcloud.net.cn/uniCloud/uni-ai.html#image-generation](https://uniapp.dcloud.net.cn/uniCloud/uni-ai.html#image-generation)
       */
      imageGeneration(options: BaiduImageGenerationOptions): Promise<BaiduImageGenerationResult>;
      /**
       * 获取生成图片任务的结果
       *
       * 文档：[https://uniapp.dcloud.net.cn/uniCloud/uni-ai.html#get-generated-image](https://uniapp.dcloud.net.cn/uniCloud/uni-ai.html#get-generated-image)
       */
      getGeneratedImage(options: BaiduGetGeneratedImageOptions): Promise<BaiduGetGeneratedImageResult>;
    }
  }

  interface UniCloudAI {
    /**
     * 获取LLM实例
     *
     * 文档：[https://uniapp.dcloud.net.cn/uniCloud/uni-ai.html#get-llm-manager](https://uniapp.dcloud.net.cn/uniCloud/uni-ai.html#get-llm-manager)
     */
    getLLMManager: (options?: UniCloudAILLM.GetLLMManagerOptions) => UniCloudAILLM.LLMManager;
    /**
     * 获取AI媒体管理实例
     *
     * 文档：[https://uniapp.dcloud.net.cn/uniCloud/uni-ai.html#get-media-manager](https://uniapp.dcloud.net.cn/uniCloud/uni-ai.html#get-media-manager)
     */
    getMediaManager: (options?: UniCloudAIMedia.GetMediaManagerOptions) => UniCloudAIMedia.MediaManager;
  }

  interface UniCloud {
    /**
     * AI扩展能力
     *
     * 文档: [https://uniapp.dcloud.net.cn/uniCloud/uni-ai.html](https://uniapp.dcloud.net.cn/uniCloud/uni-ai.html)
     */
    ai: UniCloudAI;
  }
}
