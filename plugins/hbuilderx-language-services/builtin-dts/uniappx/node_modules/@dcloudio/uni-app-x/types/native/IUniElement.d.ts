import { DrawableContext } from "./DrawableContext"
import { TakeSnapshotOptions } from "./SnapshotOptions"
import { UniEvent } from "./UniEvent"
import { CSSStyleDeclaration } from "./CSSStyleDeclaration"
import { DOMRect } from "./DOMRect"
import { UniCallbackWrapper } from "./UniCallbackWrapper"

/**
 * UVUE DOM 元素对象，描述了 UVUE DOM 元素所普通具有的属性和方法。
 * @package io.dcloud.uniapp.runtime
 */
export interface UniElement {
  /**
   * 只读属性 获取当前元素的的 class 属性的动态集合。
   */
  classList: string[]

  /**
   * 只读属性 获取当前元素的的第一个子元素，如果元素是无子元素，则返回 null。
   */
  readonly firstChild: UniElement | null

  /**
   * 只读属性 获取当前元素的最后一个子元素，如果没有子元素，则返回 null。
   */
  readonly lastChild: UniElement | null

  /**
   * 只读属性 获取当前元素在 DOM 树中的父元素，如果没有父元素（如未添加到DOM树中），则返回null。
   * @internal
   */
  readonly parentNode: UniElement | null

  /**
   * 只读属性 获取当前元素在 DOM 树中的父元素，如果没有父元素（如未添加到DOM树中），则返回null。
   */
  readonly parentElement: UniElement | null

  /**
   * 只读属性 获取当前元素的前一个同级元素，没有则返回null。
   */
  readonly previousSibling: UniElement | null

  /**
   * 只读属性 获取在 DOM 树中紧跟在其后面的同级元素，如果指定的元素为最后一个元素，则返回 null。
   * @internal
   */
  readonly nextSibling: UniElement | null

  /**
   * 只读属性 获取在 DOM 树中紧跟在其后面的同级元素，如果指定的元素为最后一个元素，则返回 null。
   */
  readonly nextElementSibling: UniElement | null

  /**
   * 只读属性 获取当前元素包含的子元素的集合
   */
  readonly children: UniElement[]

  /**
   * 只读属性 获取当前节点包含的子节点的集合
   * @internal
   */
  readonly childNodes: UniElement[]

  /**
   * 只读属性 获取当前元素的标签名
   */
  readonly tagName: string

  /**
   * 只读属性 获取当前元素的元素名称
   */
  readonly nodeName: string

  /**
   * 只读属性 获取元素上自定义数据属性（data-*）的集合
   */
  readonly dataset: Map<string, any | null>

  /**
   * 只读属性 获取元素上所有属性元素的集合
   */
  readonly attributes: Map<string, any | null>

  /**
   * 只读属性 获取元素的CSS样式对象
   */
  readonly style: CSSStyleDeclaration

  /**
   * 只读属性 获取可滚动元素内容的总宽度，仅scroll-view、list-view组件支持，其他组件返回视图宽度
   */
  readonly scrollWidth: number

  /**
   * 只读属性 获取可滚动元素内容的总高度，仅scroll-view、list-view组件支持，其他组件返回视图高度
   */
  readonly scrollHeight: number

  /**
   * 获取或修改元素滚动条到元素左边的距离像素数，仅scroll-view、list-view组件支持。其他组件返回0
   */
  scrollLeft: number

  /**
   * 获取或修改元素滚动条到元素顶部的距离像素数，仅scroll-view、list-view组件支持。其他组件返回0
   */
  scrollTop: number

  /**
   * 只读属性 元素的左边界偏移值 单位px
   */
  readonly offsetLeft: number

  /**
   * 只读属性 元素的顶部边界偏移值 单位px
   */
  readonly offsetTop: number

  /**
   * 只读属性 元素的布局宽度，宽度包含border、padding的数据值 单位px
   */
  readonly offsetWidth: number

  /**
   * 只读属性 元素的布局高度，高度包含border、padding的数据值 单位px
   */
  readonly offsetHeight: number

  /**
   * 只读属性 扩展属性
   */
  readonly ext: Map<string, any | null>

  /**
   * 获取元素标识。
   * @internal
   */
  getNodeId(): string

  /**
   * 对当前组件进行截图，调用此方法会将当前组件（包含子节点）渲染结果导出成图片。
   * 成功会返回图片对应的临时文件路径，目前默认png格式
   *
   * @param options 组件截图的参数对象
   * @uniPlatform {
   *    "app": {
   *        "android": {
   *            "osVer": "5.0",
   *            "uniVer": "x",
   *            "unixVer": "3.93"
   *        },
   *        "ios": {
   *            "osVer": "12.0",
   *            "uniVer": "x",
   *            "unixVer": "4.11"
   *   	  }
   *    }
   *    "web": {
   *        "uniVer": "x",
   *        "unixVer": "x"
   *    }
   * }
   */
  takeSnapshot(options: TakeSnapshotOptions): void

  /**
   * 将一个元素添加到指定父元素的子元素列表的末尾处。如果将被插入的元素已经存在于当前文档的文档树中，那么将会它从原先的位置移动到新的位置。
   * @param {UniElement} aChild 插入子元素对象
   */
  appendChild(aChild: UniElement): void

  /**
   * 在参考元素之前插入一个拥有指定父元素的子元素。如果给定的子元素是对文档中现有元素的引用，insertBefore() 会将其从当前位置移动到新位置。
   * @param newChild 插入子元素对象
   * @param refChild 已存在父元素的子元素对象
   */
  insertBefore(newChild: UniElement, refChild?: UniElement | null): UniElement | null

  /**
   * 将一个元素添加到指定父元素的子元素列表的末尾处 功能等同于appendChild
   * @param newChild 插入子元素对象
   */
  insertBefore(newChild: UniElement): UniElement | null

  /**
   * 设置指定元素上的某个属性值。如果设置的属性已经存在，则更新该属性值；否则使用指定的名称和值添加一个新的属性。
   * @param {string} key 属性名称
   * @param {string} value 属性值域
   */
  setAttribute(key: string, value: string): void

  /**
   * 设置指定元素上的某个属性值。功能等同setAttribute value支持任意类型
   * @param {string} key 属性名称
   * @param {string} value 属性值域
   * @internal
   */
  setAnyAttribute(key: string, value: any): void

  /**
   * 获取元素指定的属性值，如果指定的属性不存在则返回null。
   * @param {string} key 属性名称
   */
  getAttribute(key: string): string | null

  /**
   * 返回元素上一个指定的属性值。如果指定的属性不存在，则返回 null
   * @param {string} key 属性名称
   * @internal
   */
  getAnyAttribute(key: string): any | null

  /**
   * 返回改元素是否包含有指定的属性，属性存在则返回true，否则返回false。
   * @param {string} key 属性名称
   */
  hasAttribute(key: string): boolean

  /**
   * 从元素中删除一个属性，如果指定的属性不存在，则不做任何操作，也不会产生错误。
   * @param {string} key 属性名称
   */
  removeAttribute(key: string): void

  /**
   * 更新元素的样式。
   * @internal
   */
  updateStyle(map: Map<string, any | null>): void

  /**
   * 获取元素的大小及其相对于窗口的位置信息。
   */
  getBoundingClientRect(): DOMRect

  /**
   * 获取组件的绘制对象，仅uvue页面中的 view 组件支持，其它组件不支持则返回null。
   * @uniPlatform {
   *    "app": {
   *        "android": {
   *            "osVer": "5.0",
   *            "uniVer": "x",
   *            "unixVer": "3.9+"
   *        },
   *        "ios": {
   *            "osVer": "12.0",
   *            "uniVer": "x",
   *            "unixVer": "4.11"
   *   	  }
   *    }
   *    "web": {
   *        "uniVer": "x",
   *        "unixVer": "x"
   *    }
   * }
   */
  getDrawableContext(): DrawableContext | null

  /**
   * 将指定的监听器注册到元素对象上，当该对象触发指定的事件时，指定的回调函数就会被执行。
   * @param {string} type 事件类型
   * @param {(event: T) => R} callback 事件监听器 T表示event类型，R表示返回值类型
   */
  addEventListener<T extends UniEvent, R>(type: string, callback: (event: T) => R): UniCallbackWrapper

  /**
   * 删除使用 addEventListener 方法添加的事件监听器。
   * @param type 事件类型
   * @param callbackWrapper 事件监听回调封装类
   */
  removeEventListener(type: string, callbackWrapper: UniCallbackWrapper): void

  /**
   * 从元素中删除一个子元素，返回删除的元素。
   * @param {UniElement} aChild 被删除子元素对象
   */
  removeChild(aChild: UniElement): UniElement | null

  /**
   * 把元素对象从它所属的 DOM 树中删除。
   */
  remove(): void

  /**
   * 向一个指定的事件目标派发一个 Event，并以合适的顺序（同步地）调用此事件的监听器回调函数。
   * @param {string} type 事件类型
   * @param {UniEvent} value 事件返回对象
   */
  dispatchEvent(type: string, value: UniEvent): void

  /**
   * 使界面滚动到给定元素的指定坐标位置 仅scroll-view、list-view组件支持
   * @param {number} x x轴要滚动到坐标位置(单位px)
   * @param {number} y y轴要滚动到坐标位置(单位px)
   */
  scrollTo(x: number, y: number): void

  /**
   * 使得元素滚动一段特定距离 仅scroll-view、list-view组件支持
   * @param {number} x x轴要滚动的距离(单位px)
   * @param {number} y y轴要滚动的距离(单位px)
   */
  scrollBy(x: number, y: number): void

  /**
   * 返回文档中与指定选择器或选择器组匹配的第一个 Element对象。如果找不到匹配项，则返回null
   * @param {string.cssSelectorString}selector CSS 选择器字符串
   */
  querySelector(selector: string.cssSelectorString): UniElement | null

  /**
   * 返回与指定的选择器组匹配的文档中的元素列表
   * @param {string.cssSelectorString}selector CSS 选择器字符串
   */
  querySelectorAll(selector: string.cssSelectorString): UniElement[] | null

  /**
   * 使元素获取焦点 仅input、Textarea组件支持
   */
  focus(): void

  /**
   * 使元素丢失焦点 仅input、Textarea组件支持
   */
  blur(): void
}

export type INode = UniElement
export type Element = UniElement

/**
 * view元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniViewElement extends UniElement {}

/**
 * scroll-view元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniScrollViewElement extends UniElement {}

/**
 * list-view元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniListViewElement extends UniScrollViewElement {}

/**
 * list-item元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniListItemElement extends UniElement {}

/**
 * swiper元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniSwiperElement extends UniElement {}

/**
 * swiper-item元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniSwiperItemElement extends UniElement {}

/**
 * image元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniImageElement extends UniElement {}

/**
 * input元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniInputElement extends UniElement {
  /**
   * 表单的控件名称，作为键值对的一部分与表单(form组件)一同提交
   *
   * @uniPlatform {
   *    "app": {
   *        "android": {
   *            "osVer": "5.0",
   *            "uniVer": "x",
   *            "unixVer": "4.0"
   *        },
   *        "ios": {
   *            "osVer": "12.0",
   *            "uniVer": "x",
   *            "unixVer": "4.11"
   *   	  }
   *    }
   * }
   */
  name: string
  /**
   * input的类型
   *
   * @uniPlatform {
   *    "app": {
   *        "android": {
   *            "osVer": "5.0",
   *            "uniVer": "x",
   *            "unixVer": "4.0"
   *        },
   *        "ios": {
   *            "osVer": "12.0",
   *            "uniVer": "x",
   *            "unixVer": "4.11"
   *   	  }
   *    }
   * }
   */
  type: string
  /**
   * 是否禁用
   *
   * @uniPlatform {
   *    "app": {
   *        "android": {
   *            "osVer": "5.0",
   *            "uniVer": "x",
   *            "unixVer": "4.0"
   *        },
   *        "ios": {
   *            "osVer": "12.0",
   *            "uniVer": "x",
   *            "unixVer": "4.11"
   *   	  }
   *    }
   * }
   */
  disabled: boolean
  /**
   * 自动获取焦点
   *
   * @uniPlatform {
   *    "app": {
   *        "android": {
   *            "osVer": "5.0",
   *            "uniVer": "x",
   *            "unixVer": "4.0"
   *        },
   *        "ios": {
   *            "osVer": "12.0",
   *            "uniVer": "x",
   *            "unixVer": "4.11"
   *   	  }
   *    }
   * }
   */
  autofocus: boolean
  /**
   * 输入框的初始内容
   *
   * @uniPlatform {
   *    "app": {
   *        "android": {
   *            "osVer": "5.0",
   *            "uniVer": "x",
   *            "unixVer": "4.0"
   *        },
   *        "ios": {
   *            "osVer": "12.0",
   *            "uniVer": "x",
   *            "unixVer": "4.11"
   *   	  }
   *    }
   * }
   */
  value: string
}

/**
 * textarea元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniTextareaElement extends UniElement {
  /**
   * 表单的控件名称，作为键值对的一部分与表单(form组件)一同提交
   *
   * @uniPlatform {
   *    "app": {
   *        "android": {
   *            "osVer": "5.0",
   *            "uniVer": "x",
   *            "unixVer": "4.0"
   *        },
   *        "ios": {
   *            "osVer": "12.0",
   *            "uniVer": "x",
   *            "unixVer": "4.11"
   *   	  }
   *    }
   * }
   */
  name: string
  /**
   * input的类型
   *
   * @uniPlatform {
   *    "app": {
   *        "android": {
   *            "osVer": "5.0",
   *            "uniVer": "x",
   *            "unixVer": "4.0"
   *        },
   *        "ios": {
   *            "osVer": "12.0",
   *            "uniVer": "x",
   *            "unixVer": "4.11"
   *   	  }
   *    }
   * }
   */
  type: string
  /**
   * 是否禁用
   *
   * @uniPlatform {
   *    "app": {
   *        "android": {
   *            "osVer": "5.0",
   *            "uniVer": "x",
   *            "unixVer": "4.0"
   *        },
   *        "ios": {
   *            "osVer": "12.0",
   *            "uniVer": "x",
   *            "unixVer": "4.11"
   *   	  }
   *    }
   * }
   */
  disabled: boolean
  /**
   * 自动获取焦点
   *
   * @uniPlatform {
   *    "app": {
   *        "android": {
   *            "osVer": "5.0",
   *            "uniVer": "x",
   *            "unixVer": "4.0"
   *        },
   *        "ios": {
   *            "osVer": "12.0",
   *            "uniVer": "x",
   *            "unixVer": "4.11"
   *   	  }
   *    }
   * }
   */
  autofocus: boolean
  /**
   * 输入框的初始内容
   *
   * @uniPlatform {
   *    "app": {
   *        "android": {
   *            "osVer": "5.0",
   *            "uniVer": "x",
   *            "unixVer": "4.0"
   *        },
   *        "ios": {
   *            "osVer": "12.0",
   *            "uniVer": "x",
   *            "unixVer": "4.11"
   *   	  }
   *    }
   * }
   */
  value: string
}

/**
 * rich-text元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniRichTextElement extends UniElement {}

/**
 * sticky-header元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniStickyHeaderElement extends UniElement {}

/**
 * sticky-section元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniStickySectionElement extends UniElement {}

/**
 * tabs元素对象
 * @package io.dcloud.uniapp.runtime
 * @internal
 */
export interface UniTabsElement extends UniElement {
  /**
   * 添加item
   * @param pageId 页面id
   */
  appendItem(pageId: string): void

  /**
   * 添加item
   * @param itemElement item的元素对象
   */
  appendItem(itemElement: UniElement): void

  /**
   * 初始化tabBar
   */
  initTabBar(style: Map<string, any | null>): void

  /**
   * 添加自定义tabBar
   * @param tabBar tabBar元素
   * @param direction 排列方向
   */
  appendCustomTabBar(tabBar: UniElement, direction: string): void

  /**
   * item选中高亮
   * @param 被选中页面id
   * @index item下标
   */
  switchSelect(pageId: string, index: number): void

  /**
   * 隐藏TabBar
   */
  hideTabBar(op: Map<string, any | null>): void

  /**
   * 显示tabBar
   */
  showTabBar(op: Map<string, any | null>): void

  /**
   * 为 tabBar 某一项的右上角添加文本
   */
  setTabBarBadge(op: Map<string, any | null>): void

  /**
   * 移除 tabBar 某一项右上角的文本
   */
  removeTabBarBadge(op: Map<string, any | null>): void

  /**
   * 显示 tabBar 某一项的右上角的红点
   */
  showTabBarRedDot(op: Map<string, any | null>): void

  /**
   * 隐藏 tabBar 某一项的右上角的红点
   */
  hideTabBarRedDot(op: Map<string, any | null>): void

  /**
   * 动态设置 tabBar 的整体样式
   */
  setTabBarStyle(op: Map<string, any | null>): void

  /**
   * 动态设置 tabBar 某一项的内容
   */
  setTabBarItem(op: Map<string, any | null>): void

  /**
   * 获取tabbar高度
   */
  getTabBarHeight(): number

  /**
   * 只读属性 tabBar是否隐藏
   */
  isTabBarVisible: boolean
  /**
   * 只读属性 当前显示itemId
   */
  currentItemId: string | null
}

export type ITabsNode = UniTabsElement

/**
 * text元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniTextElement extends UniElement {
  /**
   * 只读属性 text元素的文案内容
   */
  value: string
  getTextExtra(): any | null
}

export type TextElement = UniTextElement

/**
 * web-view元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniWebViewElement extends UniElement {
  /**
   * 后退
   */
  back(): void
  /**
   * 前进
   */
  forward(): void
  /**
   * 重新加载
   */
  reload(): void
  /**
   * 停止加载
   */
  stop(): void
  /**
   * 原生和WebView通信（执行JS脚本）
   */
  evalJS(js: string): void
}

export type IWebViewNode = UniWebViewElement

/**
 * 注释节点
 * @internal
 */
export interface UniCommentElement extends UniElement {
  text: string
}

export type IComment = UniCommentElement

/**
 * button元素对象
 * @package io.dcloud.uniapp.runtime
 */
export interface UniButtonElement extends UniElement {}

/**
 * 嵌套 scroll-view 场景中属于外层 scroll-view 的节点
 * @package io.dcloud.uniapp.runtime
 */
export interface UniNestedScrollHeaderElement extends UniElement {}

/**
 * 嵌套 scroll-view 场景中属于里层 scroll-view 的节点
 * @package io.dcloud.uniapp.runtime
 */
export interface UniNestedScrollBodyElement extends UniElement {}
