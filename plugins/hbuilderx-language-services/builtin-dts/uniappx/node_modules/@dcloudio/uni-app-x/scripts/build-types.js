import { glob } from 'glob'
import { fileURLToPath } from 'url'
import path from 'path'
import { config } from 'dotenv'
import fs from 'fs'
import fse from 'fs-extra'
import del from 'delete'
import minimist from 'minimist'

config()

const env = process.env
const args = minimist(process.argv.slice(2))

const targetInfo = {
  core: 'UNI_CORE_DIR',
  'uts-plugin-api': 'UNI_UTS_PLUGIN_API_DIR',
  'uts-plugin-component': 'UNI_UTS_PLUGIN_COMPONENT_DIR',
  'uts-plugin-biz': 'UNI_UTS_PLUGIN_MODULES_DIR'
}
const target = args.t || 'core'
const envName = targetInfo[target]
let targetDir = env[envName]


if (!targetDir) {
  throw new Error(`.env ${envName} is required`)
}

const __dirname = fileURLToPath(new URL('.', import.meta.url))
const cwd = path.isAbsolute(targetDir) ? targetDir : path.join(__dirname, '../', targetDir)

const files = await glob('**/interface.{uts,ts}', {
  absolute: false,
  cwd
})

const rootDir = path.join(
  __dirname,
  `../types/uni/${target}/lib`
)

del.sync(rootDir, {
  force: true
})

let refContent = ''
let refContentIndex = ''

files.forEach(file => {
  let content = fs.readFileSync(path.join(cwd, file), 'utf-8')
  const dir = path.join(rootDir, path.dirname(file))
  const filename = path.basename(file)
  fse.ensureDirSync(dir)
  fs.writeFileSync(path.join(dir, filename.replace(/\.u?ts$/, '.d.ts')), content, 'utf-8')
  if (/\bexport interface Uni\b/.test(content)) {
    const imports = []
    const exports = []
    const types = []
    const res = content.matchAll(/\bexport\s+(?:type|interface)\s+(\$?[a-zA-Z0-9_]+)\b(?:<([a-zA-Z0-9_]+)(?:\s*=\s*[a-zA-Z0-9_]+)?>)?/g)
    for (const [_, type, arg] of res) {
      if (type === 'Uni') {
        continue
      }
      const argStr = `<${arg}>`
      exports.push(`  ${type},`)
      imports.push(`  ${type} as ${type}Origin,`)
      types.push(`  type ${type}${arg ? argStr : ''} = ${type}Origin${arg ? argStr : ''}`)
    }
    const globalTypeContent = `// 本文件为自动构建生成
import {
${imports.join('\n')}
  Uni as UniOrigin
} from './interface'

declare global {
${types.join('\n')}
  interface Uni extends UniOrigin { }
}
`
const exportTypeContent = `// 本文件为自动构建生成
export {
${exports.join('\n')}
} from './interface'
`

    const libPath = path.dirname(file).replace(/\\/g, '/')
    refContent += `/// <reference path='./lib/${libPath}/global.d.ts' />\n`
    refContentIndex += `export * from './lib/${libPath}'\n`
    fs.writeFileSync(path.join(dir, 'global.d.ts'), globalTypeContent, 'utf-8')
    fs.writeFileSync(path.join(dir, 'index.d.ts'), exportTypeContent, 'utf-8')
  }
})

fs.writeFileSync(path.join(rootDir, '../global.d.ts'), refContent, 'utf-8')
fs.writeFileSync(path.join(rootDir, '../index.d.ts'), refContentIndex, 'utf-8')
