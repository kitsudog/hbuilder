import { glob } from 'glob'
import { fileURLToPath } from 'url'
import path from 'path'
import fs from 'fs'

const __dirname = fileURLToPath(new URL('.', import.meta.url))

const cwd = path.join(__dirname, '../', 'types/native')

const indexTypePath = path.join(__dirname, '../', 'types/native/index.d.ts')
const globalTypePath = path.join(__dirname, '../', 'types/native/global.d.ts')

const files = (await glob('**/*.d.ts', {
  absolute: false,
  cwd
})).filter(filePath => {
  return filePath !== 'global.d.ts' && filePath !== 'index.d.ts'
})

const indexTypeContent = `// 本文件为自动构建生成
${files.map(filePath => `export * from './${filePath.replace(/\.d\.ts$/, '')}'`).join('\n')}`
fs.writeFileSync(indexTypePath, indexTypeContent, 'utf-8')

const imports = []
const declares = []

function addImport (item) {
  if (!imports.includes(item)) {
    imports.push(item)
  }
}

function addDeclare (item) {
  if (!declares.includes(item)) {
    declares.push(item)
  }
}

files.forEach(filePath => {
  let content = fs.readFileSync(path.join(cwd, filePath), 'utf-8')
  const res1 = content.matchAll(/\bexport\s+(?:declare\s+)?(class|function|const|let)\s+(\$?[a-zA-Z0-9_]+)\b(?:<([a-zA-Z0-9_]+)(?:\s*=\s*[a-zA-Z0-9_]+)?>)?/g)
  for (const [_, type, name, arg] of res1) {
    addImport(`  ${name} as ${name}Origin,`)
    addDeclare(`  const ${name}: typeof ${name}Origin`)
    if (type === 'class') {
      const argStr = `<${arg}>`
      addDeclare(`  type ${name}${arg ? argStr : ''} = ${name}Origin${arg ? argStr : ''}`)
    }
  }
  const res2 = content.matchAll(/\bexport\s+(type|interface)\s+(\$?[a-zA-Z0-9_]+)\b(?:<([a-zA-Z0-9_]+)(?:\s*=\s*[a-zA-Z0-9_]+)?>)?/g)
  for (const [_, _type, name, arg] of res2) {
    addImport(`  ${name} as ${name}Origin,`)
    const argStr = `<${arg}>`
    addDeclare(`  type ${name}${arg ? argStr : ''} = ${name}Origin${arg ? argStr : ''}`)
  }
})

const globalTypeContent = `// 本文件为自动构建生成
import {
${imports.join('\n')}
} from './index'

declare global {
${declares.join('\n')}
}
`
fs.writeFileSync(globalTypePath, globalTypeContent, 'utf-8')
