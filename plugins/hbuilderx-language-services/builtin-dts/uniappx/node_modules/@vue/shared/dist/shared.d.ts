/// <reference types="@dcloudio/uni-app-x/types/native-global" />
export { UTSPromise } from 'io.dcloud.uts';
import { ComponentInternalInstance } from '@vue/runtime-core';

export declare const remove: (arr: any[], el: any | null) => void;

export declare function isTrue(value: any | null): boolean;
export declare function isBoolean(do_not_emit_err: any | null): boolean;
export declare function isNumber(do_not_emit_err: any | null): boolean;
export declare function isInteger(number: any | null): Boolean;
export declare function isString(do_not_emit_err: any | null): boolean;
export declare function isFunction(value: any | null): boolean;
export declare function isArray(value: any | null): boolean;
export declare function isMap(value: any | null): boolean;
export declare function isSet(value: any | null): boolean;
export declare function isObjectLike(value: any | null): boolean;
export declare function isObject(value: any | null): boolean;
export declare function isReactiveObject(value: any | null): boolean;
export declare function isJSONObject(value: any | null): boolean;
export declare function isDate(value: any | null): boolean;
export declare function isComponentPublicInstance(value: any | null): boolean;
export declare function isCreateVueComponent(value: any | null): boolean;
export declare function isIntegerKey(key: any | null): boolean;
export declare function isSame(a: any | null, b: any | null): boolean;
export declare function isElement(value: any | null): boolean;
export declare function isTextElement(value: any | null): boolean;
export declare function isRegExp(value: any | null): boolean;
export declare function isPromise(value: any | null): boolean;
export declare function isFunctionArgs0(value: any | null): boolean;
export declare function isFunctionArgs1(value: any | null): boolean;
export declare function isFunctionArgs2(value: any | null): boolean;
export declare function isFunctionArgs3(value: any | null): boolean;

declare let __DEV__: any;

/**
 * @param search - search string to parse
 * @returns a query map
 */
export declare function parseQuery(search: string): Map<string, string | null>;

export declare function invokeArrayFns(fns: any[], arg?: any | null): any | null;
export declare function invokeHook(ins: ComponentInternalInstance, type: string, event?: any | null): any | null;

export declare function callFunction(fn: any, args: Array<any | null>): any | null;
export declare function getProperty<T>(obj: any | null, name: string): T | null;
export declare function hasProperty(obj: any | null, name: string): boolean;
export declare function callVueMethod(instance: any, methodName: string, args: Array<any | null>): any | null;
export declare function hasVueMethod(obj: any, name: string): boolean;

interface PerformanceEntry {
    name: string;
    entryType: string;
    startTime: number;
    duration: number;
    toJSON(): string;
}
declare class PerformanceMeasure implements PerformanceEntry {
    name: string;
    entryType: string;
    startTime: number;
    duration: number;
    constructor(name: string, startTime: number, duration: number);
    toJSON(): string;
}
declare class Performance {
    private marks;
    private measures;
    mark(markName: string): void;
    measure(measureName: string, startMark: string, endMark: string): PerformanceMeasure | null;
    clearMarks(markName?: string | null): void;
    clearMeasures(measureName?: string | null): void;
    getEntriesByName(name: String): Array<PerformanceEntry>;
    getEntriesByType(type: String): Array<PerformanceEntry>;
    now(): number;
    clear(): void;
}
export declare const perf: Performance;

export declare function ensureArrayIndex<T>(arr: Array<T | null>, index: number): void;
export declare function setArrayElement<T>(arr: Array<T | null>, index: number, value: T): void;

export declare function warn(msg: string, ...do_not_transform_spread: Array<any | null>): void;

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 * IMPORTANT: all calls of this function must be prefixed with
 * \/\*#\_\_PURE\_\_\*\/
 * So that rollup can tree-shake them if necessary.
 */
export declare function makeMap(str: string, expectsLowerCase?: boolean): (key: string) => boolean;

export declare const PATCH_FLAGS_TEXT: Int;
export declare const PATCH_FLAGS_CLASS: Int;
export declare const PATCH_FLAGS_STYLE: Int;
export declare const PATCH_FLAGS_PROPS: Int;
export declare const PATCH_FLAGS_FULL_PROPS: Int;
export declare const PATCH_FLAGS_NEED_HYDRATION: Int;
export declare const PATCH_FLAGS_STABLE_FRAGMENT: Int;
export declare const PATCH_FLAGS_KEYED_FRAGMENT: Int;
export declare const PATCH_FLAGS_UNKEYED_FRAGMENT: Int;
export declare const PATCH_FLAGS_NEED_PATCH: Int;
export declare const PATCH_FLAGS_DYNAMIC_SLOTS: Int;
export declare const PATCH_FLAGS_DEV_ROOT_FRAGMENT: Int;
export declare const PATCH_FLAGS_HOISTED: Int;
export declare const PATCH_FLAGS_BAIL: Int;

export declare const SHAPE_FLAGS_FRAGMENT: Int;
export declare const SHAPE_FLAGS_ELEMENT: Int;
export declare const SHAPE_FLAGS_FUNCTIONAL_COMPONENT: Int;
export declare const SHAPE_FLAGS_STATEFUL_COMPONENT: Int;
export declare const SHAPE_FLAGS_TEXT_CHILDREN: Int;
export declare const SHAPE_FLAGS_ARRAY_CHILDREN: Int;
export declare const SHAPE_FLAGS_SLOTS_CHILDREN: Int;
export declare const SHAPE_FLAGS_TELEPORT: Int;
export declare const SHAPE_FLAGS_SUSPENSE: Int;
export declare const SHAPE_FLAGS_COMPONENT_SHOULD_KEEP_ALIVE: Int;
export declare const SHAPE_FLAGS_COMPONENT_KEPT_ALIVE: Int;
export declare const SHAPE_FLAGS_COMPONENT: Int;
export declare const COMPONENT_SHOULD_KEEP_ALIVE: Int;
export declare const COMPONENT_KEPT_ALIVE: Int;

export declare const ON_SHOW = "onShow";
export declare const ON_HIDE = "onHide";
export declare const ON_LAUNCH = "onLaunch";
export declare const ON_ERROR = "onError";
export declare const ON_THEME_CHANGE = "onThemeChange";
export declare const OFF_THEME_CHANGE = "offThemeChange";
export declare const ON_KEYBOARD_HEIGHT_CHANGE = "onKeyboardHeightChange";
export declare const ON_PAGE_NOT_FOUND = "onPageNotFound";
export declare const ON_UNHANDLE_REJECTION = "onUnhandledRejection";
export declare const ON_LAST_PAGE_BACK_PRESS = "onLastPageBackPress";
export declare const ON_EXIT = "onExit";
export declare const ON_LOAD = "onLoad";
export declare const ON_READY = "onReady";
export declare const ON_UNLOAD = "onUnload";
export declare const ON_RESIZE = "onResize";
export declare const ON_BACK_PRESS = "onBackPress";
export declare const ON_PAGE_SCROLL = "onPageScroll";
export declare const ON_TAB_ITEM_TAP = "onTabItemTap";
export declare const ON_REACH_BOTTOM = "onReachBottom";
export declare const ON_PULL_DOWN_REFRESH = "onPullDownRefresh";
export declare const ON_WEB_VIEW_SERVICE_MESSAGE = "onWebViewServiceMessage";
export declare const ATTR_KEY = "key";
export declare const ATTR_VALUE = "value";
export declare const ATTR_CLASS = "class";
export declare const ATTR_STYLE = "style";
export declare const NODE_TEXT = "text";

export type SlotFlags = number;
/**
 * Stable slots that only reference slot props or context state. The slot
 * can fully capture its own dependencies so when passed down the parent won't
 * need to force the child to update.
 */
export declare const SLOT_FLAGS_STABLE = 1;
/**
 * Slots that reference scope variables (v-for or an outer slot prop), or
 * has conditional structure (v-if, v-for). The parent will need to force
 * the child to update because the slot does not fully capture its dependencies.
 */
export declare const SLOT_FLAGS_DYNAMIC = 2;
/**
 * `<slot/>` being forwarded into a child component. Whether the parent needs
 * to update the child is dependent on what kind of slots the parent itself
 * received. This has to be refined at runtime, when the child's vnode
 * is being created (in `normalizeChildren`)
 */
export declare const SLOT_FLAGS_FORWARDED = 3;

export declare function getExtraVNode<T>(el: Element): T | null;
export declare function setExtraVNode<T>(el: Element, vnode: T | null): void;
export declare function getExtraVueEventInvokers<T>(el: Element): T | null;
export declare function setExtraVueEventInvokers<T>(el: Element, vei: T): void;
export declare function getExtraStyles(el: Element): Map<string, Map<string, Map<string, any>>> | null;
export declare function setExtraStyles(el: Element, styles: Map<string, Map<string, Map<string, any>>>): void;
export declare function getExtraParentStyles(el: Element): Map<string, Map<string, Map<string, any>>> | null;
export declare function setExtraParentStyles(el: Element, styles: Map<string, Map<string, Map<string, any>>>): void;
export declare function getExtraClassStyle(el: Element): Map<string, any> | null;
export declare function setExtraClassStyle(el: Element, classStyle: Map<string, any>): void;
export declare function getExtraStyle(el: Element): Map<string, any> | null;
export declare function setExtraStyle(el: Element, style: Map<string, any>): void;
export declare function isExtraTextNode(el: Element): boolean;
export declare function setExtraIsTextNode(el: Element, isTextNode: boolean): void;
export declare function getExtraParentNode(el: Element): Element | null;
export declare function setExtraParentNode(el: Element, parentNode: Element): void;
export declare function getExtraSiblingNode(el: Element): Element | null;
export declare function setExtraSiblingNode(el: Element, siblingNode: Element): void;
export declare function removeExtraParentNode(el: Element): void;
export declare function getExtraChildNode(el: Element): Element | null;
export declare function setExtraChildNode(el: Element, childNode: Element): void;
export declare function removeExtraChildNode(el: Element): void;
export declare function getExtraChildNodes(el: Element): Element[] | null;
export declare function setExtraChildNodes(el: Element, childNodes: Element[]): void;
export declare function initDocumentExtraData<T>(document: IDocument, page: IPage, route: T, query: Map<string, string | null>, showOptions: Map<string, any | null>): void;
export declare function getPageByDocument(document: IDocument): IPage;
export declare function getRouteByDocument<T>(document: IDocument): T;
export declare function getQueryByDocument(document: IDocument): Map<string, string | null>;
export declare function getShowOptionsByDocument(document: IDocument): Map<string, any | null>;
export declare function setPageShown(document: IDocument): void;
export declare function isPageShown(document: IDocument): boolean;

export declare function normalizeStyle(value: any): Map<string, any | null>;
export declare function parseStringStyle(cssText: string): Map<string, any>;
export declare function normalizeClass(value: any): string;
export declare function normalizeProps(props: any | null): Map<string, any | null> | null;

export declare class UTSSymbol {
    name: string | null;
    constructor(name?: string | null);
    toString(): string;
    static keyFor(symbol: UTSSymbol): string | null;
}

export declare const EMPTY_OBJ: Map<string, any | null>;
export declare const EMPTY_ARR: Array<any>;
export declare const NOOP: () => void;
export declare const isReservedProp: (key: string) => boolean;
export declare function isOn(key: string): boolean;
export declare function isModelListener(key: string): boolean;
export declare function extend<T>(a: Map<string, T>, b: Map<string, T>): Map<string, T>;
export declare const camelize: (str: string) => string;
export declare const hyphenate: (str: string) => string;
export declare const capitalize: (str: string) => string;
/**
 * @private
 */
export declare const toHandlerKey: (str: string) => string;
export declare function hasChanged(value: any | null, oldValue: any | null): boolean;
export declare function def<T>(obj: Map<string, T>, key: string, value: T): void;

export { __DEV__,  };
