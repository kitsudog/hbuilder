"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.baseNewIndex=void 0;const core_1=require("../../../core"),serviceTypes_1=require("../serviceTypes"),nodeHandle_1=require("./handle/nodeHandle"),tokenHandle_1=require("./handle/tokenHandle");async function baseNewIndex(e,s,n,r){let t=r.parseStylesheet(s);if(0!==serviceTypes_1.ParseErrorCollector.entries(t).length){const r=new tokenHandle_1.TokenHandle;return await r.newIndexFromToken(e,s,n)}const o=[],d=[],a=[],c=[],l=new nodeHandle_1.NodeHandle;t.accept((async r=>{if(r.type===serviceTypes_1.NodeType.Import){let t;r.getText().includes("url(")||(t=l.createdRefIndexValue(e,s,n,r,"ref")),t&&o.push(t)}else if(r.type===serviceTypes_1.NodeType.URILiteral){const t=l.createdRefIndexValue(e,s,n,r,"url");t&&o.push(t)}else if(r.type===serviceTypes_1.NodeType.ClassSelector){const t=l.createdIndexValue(e,s,n,r,core_1.IndexItemType.DEF,"CLASS");d.push(t)}else if(r.type===serviceTypes_1.NodeType.IdentifierSelector){const t=l.createdIndexValue(e,s,n,r,core_1.IndexItemType.REF,"ID");a.push(t)}else if(r.type===serviceTypes_1.NodeType.HexColorValue){const t=l.createdIndexValue(e,s,n,r,core_1.IndexItemType.REF);c.push(t)}return!0}));const p=new Map;p.set("REF",o),p.set("CLASS",d),p.set("ID",a),p.set("COLOR",c);const i=(0,core_1.assemblyKindData)(p,e,s.uri);if(0!==i.kindMap.size)return i}exports.baseNewIndex=baseNewIndex;