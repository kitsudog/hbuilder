"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&__createBinding(t,e,n);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.isDirectAttr=exports.validTsVar=exports.getSlotNameExp=exports.getSlotName=exports.toUnicode=exports.mergeCodeGen=exports.slotSimpleAliasRE=exports.slotAliasRE=exports.stripParensRE=exports.forAliasRE=exports.parseBindingRanges=exports.findBindingVars=exports.getStartEnd=exports.getVueLibraryName=exports.camelize=exports.capitalize=exports.isHTMLTag=void 0;const vShared=__importStar(require("@vue/shared"));function isHTMLTag(e){return vShared.isHTMLTag(e)||"hgroup"===e||"slot"===e||"component"===e}function capitalize(e){return vShared.capitalize(vShared.camelize(e.replace(/:/g,"-")))}function camelize(e){return vShared.camelize(e)}function getVueLibraryName(e){return e<2.7?"@vue/runtime-dom":"vue"}function getStartEnd(e,t){return{start:e.getStart(t),end:e.getEnd()}}function findBindingVars(e,t,n){const r=[];return function t(i){if(e.isIdentifier(i))r.push(getStartEnd(i,n));else if(e.isObjectBindingPattern(i)||e.isArrayBindingPattern(i))for(const n of i.elements)e.isBindingElement(n)&&t(n.name);else e.isPropertyAssignment(i)?t(i.initializer):e.isShorthandPropertyAssignment(i)?r.push(getStartEnd(i.name,n)):(e.isSpreadAssignment(i)||e.isSpreadElement(i))&&t(i.expression)}(t),r}function parseBindingRanges(e,t,n){const r=[];return t.forEachChild((i=>{if(n)(e.isTypeAliasDeclaration(i)||e.isInterfaceDeclaration(i))&&r.push(getStartEnd(i.name,t));else if(e.isVariableStatement(i))for(const n of i.declarationList.declarations){const i=findBindingVars(e,n.name,t);for(const e of i)r.push(e)}else e.isFunctionDeclaration(i)?i.name&&e.isIdentifier(i.name)&&r.push(getStartEnd(i.name,t)):e.isClassDeclaration(i)?i.name&&r.push(getStartEnd(i.name,t)):e.isEnumDeclaration(i)&&r.push(getStartEnd(i.name,t));if(e.isImportDeclaration(i)&&i.importClause&&(n||!i.importClause.isTypeOnly)&&(i.importClause.name&&!n&&r.push(getStartEnd(i.importClause.name,t)),i.importClause.namedBindings))if(e.isNamedImports(i.importClause.namedBindings))for(const e of i.importClause.namedBindings.elements)r.push(getStartEnd(e.name,t));else e.isNamespaceImport(i.importClause.namedBindings)&&r.push(getStartEnd(i.importClause.namedBindings.name,t))})),r}function mergeCodeGen(e,t){const n=e.getText().length;for(const r of t.getMappings())e.addMapping2({...r,mappedRange:{start:r.mappedRange.start+n,end:r.mappedRange.end+n},additional:void 0});e.addText(t.getText())}function toUnicode(e){return e.split("").map((e=>{var t=e.charCodeAt(0).toString(16).padStart(4,"0");return t.length>2?"\\u"+t:e})).join("")}function getSlotName(e){var t,n;const r=e.attributes;for(var i=0,a=r.length;i<a;i++)if("name"===r[i].name.text&&(null===(n=null===(t=r[i])||void 0===t?void 0:t.value)||void 0===n?void 0:n.text))return r[i].value.text;return"default"}function getSlotNameExp(e){if(e.type)return"default"}exports.isHTMLTag=isHTMLTag,exports.capitalize=capitalize,exports.camelize=camelize,exports.getVueLibraryName=getVueLibraryName,exports.getStartEnd=getStartEnd,exports.findBindingVars=findBindingVars,exports.parseBindingRanges=parseBindingRanges,exports.forAliasRE=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,exports.stripParensRE=/^\(|\)$/g,exports.slotAliasRE=/(v-slot):([a-zA-Z]+)/,exports.slotSimpleAliasRE=/(#)([a-zA-Z]+)/,exports.mergeCodeGen=mergeCodeGen,exports.toUnicode=toUnicode,exports.getSlotName=getSlotName,exports.getSlotNameExp=getSlotNameExp,exports.validTsVar=/^[a-zA-Z_$][0-9a-zA-Z_$]*$/;const isDirectAttr=e=>"v-for"===e.name.text||"v-if"===e.name.text||"v-else-if"===e.name.text||"v-else"===e.name.text;exports.isDirectAttr=isDirectAttr;