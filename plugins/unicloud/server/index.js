require("./utils/init");const http=require("http"),os=require("os"),{parseBody:parseBody,getLogger:getLogger,ErrorWithCode:ErrorWithCode,initHxConfig:initHxConfig,getGlobalJsonRpcClient:getGlobalJsonRpcClient}=require("./utils"),jsonRpcClient=getGlobalJsonRpcClient(),server=http.createServer((async(e,s)=>{const t={req:e,res:s,method:e.method,status(e){return s.statusCode=e,this},send(e){return s.end(JSON.stringify(e)),this},throw:(e,s)=>{throw new ErrorWithCode({code:s||"SYSTEM_ERROR",message:e||"未知错误"})},hxConfig:null,servePath:__dirname,jsonRpcClient:jsonRpcClient};if(s.setHeader("Content-Type","application/json;charset=UTF-8"),s.setHeader("Access-Control-Allow-Origin","*"),s.setHeader("Access-Control-Allow-Headers",e.headers["access-control-request-headers"]||"Origin, X-Requested-With, Content-Type, Accept"),"POST"===t.method)t.data=await parseBody(e);else if("OPTIONS"===t.method)return void t.status(200).send({});const r=e.url.split("/"),o=r[1],n=r[2];if(!o||!n)return void t.status(404).send({code:"NOT_FOUND",message:"访问地址不正确"});let i;t.controller=o,t.service=n;try{i=require(`./controller/${o}`)}catch(e){return void t.status(404).send({code:"NOT_FOUND",message:"访问地址不正确"})}initHxConfig(t),t.logger=getLogger(t);const c=new i;c.ctx=t;try{const e=await c.exec();t.status(200).send(e)}catch(e){t.status("NOT_FOUND"===e.code?404:500).send({code:e.code||"SYSTEM_ERROR",message:e.message||"调试服务内部错误"})}}));function isRunning(e){try{return process.kill(e,0)}catch(e){return"EPERM"===e.code}}server.listen(process.env.UNICLOUD_SERVE_PORT,"0.0.0.0"),server.on("listening",(()=>{const e=os.networkInterfaces();let s=[];Object.keys(e).forEach((t=>{s=s.concat(e[t])}));const t=s.filter((e=>"IPv4"===e.family)).sort(((e,s)=>"127.0.0.1"===e.address?-1:1)).map((e=>e.address));if(0===t.length)throw new Error("未能获取局域网地址，本地调试服务不可用");const r=server.address().port;process.send&&process.send({action:"server/start",data:{address:t,servePort:r,debugPort:process.debugPort}})})),server.on("error",(e=>{"EADDRINUSE"===e.code&&process.send({action:"server/error",data:{code:e.code,message:e.message,detail:{servePort:e.port}}})}));const uniCloudPluginPid=parseInt(process.env.UNICLOUD_PLUGIN_PID);uniCloudPluginPid&&setInterval((()=>{isRunning(uniCloudPluginPid)||process.exit(1)}),3e3);