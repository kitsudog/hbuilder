const fs=require("fs"),path=require("path"),Hjson=require("hjson");class ErrorWithCode extends Error{constructor(t,e){super(t),this.code=e}}function getType(t){return Object.prototype.toString.call(t).slice(8,-1).toLowerCase()}function parseJson(t,e="path"){let n;return n="path"===e?fs.readFileSync(t).toString().replace("\r\n","\n").replace("\r","\n"):t,Hjson.parse(n)}function getWorkspacePath(t){return t&&t.uri&&t.uri.fsPath}function getRealWorkspace({workspaceFolder:t,uniCloudInfo:e,provider:n}){const o=e.find((t=>t.provider===n));return o&&getWorkspacePath(o.workspaceFolder)||t}function isUniAppCli(t){return[path.resolve(t,"src","manifest.json"),path.resolve(t,"src","pages.json")].every((t=>fs.existsSync(t)))}function getWorkspacePathFromFilePath(t){const e=t.match(/(.*?)\/(uniCloud-(?:aliyun|tcb)|src\/uni_modules|uni_modules)/);return e&&e[1]}function getAppid(t){const e=isUniAppCli(t),n=path.resolve(t,e?"src":"","manifest.json");let o={};try{o=parseJson(n)}catch(t){}return o.appid}function getModuleList(t){const e=path.resolve(t,isUniAppCli(t)?"src":"","uni_modules");try{if(!fs.statSync(e).isDirectory())return[]}catch(t){return[]}return fs.readdirSync(e).filter((t=>{try{return!!fs.statSync(path.resolve(e,t)).isDirectory()}catch(t){return!1}}))}function getModuleUsageConfig(t){let e={};try{e=parseJson(path.resolve(t,isUniAppCli(t)?"src":"","uni-modules.config.json"))}catch(t){}let n=e&&e.uni_modules;return n&&"object"===getType(n)||(n={}),n}function getUniCloudPathList(t,e){const n=[path.resolve(t,`uniCloud-${e}`)],o=getModuleList(t);if(!o||0===o.length)return n;const r=getModuleUsageConfig(t);for(let s=0;s<o.length;s++){const i=o[s],c=r[i];let l=c&&c.uniCloud;if(l&&"array"===getType(l)||(l=[e]),l.indexOf(e)>-1){const e=path.resolve(t,isUniAppCli(t)?"src":"",`uni_modules/${i}/uniCloud`);fs.existsSync(e)&&n.push(e)}}return n}function getCloudfunctionPathList(t,e){const n=getUniCloudPathList(t,e),o=[];for(let t=0;t<n.length;t++){const e=path.resolve(n[t],"cloudfunctions");fs.existsSync(e)&&o.push(e)}return o}function getDatabasePathList(t,e){const n=[path.resolve(t,`uniCloud-${e}/database`)],o=getModuleList(t);if(!o||0===o.length)return n;const r=getModuleUsageConfig(t);for(let s=0;s<o.length;s++){const i=o[s];let c=r[i];if(c&&"array"===getType(c)||(c=[e]),c.indexOf(e)>-1){const e=path.resolve(t,isUniAppCli(t)?"src":"",`uni_modules/${i}/uniCloud/database`);fs.existsSync(e)&&n.push(e)}}return n}function getFunctionPathList(t){const e=["common","uni-clientDB-actions"];let n=[];try{n=fs.readdirSync(t).filter((t=>-1===e.indexOf(t))).map((e=>path.resolve(t,e)))}catch(t){}return n}function getCommonModulePathList(t){let e=[];const n=path.resolve(t,"common");try{e=fs.readdirSync(n).map((t=>path.resolve(n,t)))}catch(t){}return e}function getFunctionNameList(t){const e=["common","uni-clientDB-actions"];let n=[];try{n=fs.readdirSync(t).filter((t=>-1===e.indexOf(t)))}catch(t){}return n}function getPossibleFunctionPath(t,e,n){const o=getCloudfunctionPathList(t,e),r=[];for(let t=0;t<o.length;t++){const e=o[t];getFunctionNameList(e).indexOf(n)>-1&&r.push(path.resolve(e,n))}return r}function getFunctionEntry(t,e,n){const o=getPossibleFunctionPath(t,e,n);if(0===o.length)throw new ErrorWithCode(`未匹配到云函数[${n}]`,"NOT_FOUND");if(o.length>1)throw console.error(`云函数[${n}]存在名称冲突，请解决冲突后再试。产生冲突的路径如下：`),o.forEach((t=>{console.error(t)})),new ErrorWithCode("云函数名称冲突，请解决后再试","CONFLICT_NAME");return o[0]}function getPossibleCommonModule(t,e,n){const o=getCloudfunctionPathList(t,e),r=[];for(let t=0;t<o.length;t++){const e=o[t];let s;const i=path.resolve(e,`common/${n}`);try{s=fs.statSync(i)}catch(t){}s&&s.isDirectory()&&r.push(i)}return r}function getCommonModulePath(t,e,n){const o=getPossibleCommonModule(t,e,n);if(0===o.length)throw new ErrorWithCode(`未找到公共模块[${n}]`,"NOT_FOUND");if(o.length>1)throw console.error(`公共模块[${n}]存在名称冲突，请解决冲突后再试。产生冲突的路径如下：`),o.forEach((t=>{console.error(t)})),new ErrorWithCode(`公共模块[${n}]名称冲突，请解决后再试', 'CONFLICT_NAME`);return o[0]}function getUniIdPath(t,e){return getCommonModulePath(t,e,"uni-id")}function getPossibleAction(t,e,n){const o=getCloudfunctionPathList(t,e),r=[];for(let t=0;t<o.length;t++){const e=o[t];let s;const i=path.resolve(e,`uni-clientDB-actions/${n}.js`);try{s=fs.statSync(i)}catch(t){}s&&s.isFile()&&r.push(i)}return r}function getActionPath(t,e,n){const o=getPossibleAction(t,e,n);if(0===o.length)throw new ErrorWithCode(`未找到uni-clientDB-actions[${n}]`,"NOT_FOUND");if(o.length>1)throw console.error(`uni-clientDB-actions[${n}]存在名称冲突，请解决冲突后再试。产生冲突的路径如下：`),o.forEach((t=>{console.error(t)})),new ErrorWithCode(`uni-clientDB-actions[${n}]名称冲突，请解决后再试`,"CONFLICT_NAME");return o[0]}function getPossibleSchema(t,e,n){const o=getDatabasePathList(t,e),r=[];for(let t=0;t<o.length;t++){const e=o[t];let s;const i=path.resolve(e,`${n}.schema.json`);try{s=fs.statSync(i)}catch(t){}s&&s.isFile()&&r.push(i)}return r}function getSchemaPath(t,e,n){const o=getPossibleSchema(t,e,n);if(0===o.length)throw new ErrorWithCode(`项目database目录下缺少${n}.schema.json。如云端的该表已配置schema，请下载到database目录中`,"NOT_FOUND");if(o.length>1)throw console.error(`${n}表对应的schema存在名称冲突，请解决冲突后再试。产生冲突的路径如下：`),o.forEach((t=>{console.error(t)})),new ErrorWithCode(`${n}表对应的schema名称冲突，请解决后再试`,"CONFLICT_NAME");return o[0]}function getPossibleValidateFunction(t,e,n){const o=getDatabasePathList(t,e),r=[];for(let t=0;t<o.length;t++){const e=o[t];let s;const i=path.resolve(e,`validateFunction/${n}.js`);try{s=fs.statSync(i)}catch(t){}s&&s.isFile()&&r.push(i)}return r}function getValidateFunctionPath(t,e,n){const o=getPossibleValidateFunction(t,e,n);if(0===o.length)throw new ErrorWithCode(`未找到扩展校验函数[${n}]`,"NOT_FOUND");if(o.length>1)throw console.error(`扩展校验函数[${n}]存在名称冲突，请解决冲突后再试。产生冲突的路径如下：`),o.forEach((t=>{console.error(t)})),new ErrorWithCode(`扩展校验函数[${n}]名称冲突，请解决后再试`,"CONFLICT_NAME");return o[0]}function isModuleEncrypted(t){return fs.existsSync(path.resolve(t,"encrypt"))}function isFileEncrypted(t){let e;try{e=fs.statSync(t)}catch(t){return!1}const n=fs.openSync(t),o=Buffer.alloc(Math.min(e.size,512));return fs.readSync(n,o),fs.closeSync(n),Array.from(o).some((t=>0===t))}function getAllModuleFunctionPath(t,e){const n=getCloudfunctionPathList(t,e),o=[];for(let t=0;t<n.length;t++){const e=getFunctionPathList(n[t]);o.push(...e)}return o}function getEncryptedFunctionList(t,e){return getAllModuleFunctionPath(t,e).filter((t=>isModuleEncrypted(t))).map((t=>({name:t.replace(/\\/g,"/").split("/").pop(),functionPath:t})))}function getCollectionListFromAllDbInit(t,e){const n=getUniCloudPathList(t,e),o=[];for(let t=0;t<n.length;t++){const e=n[t],r=path.resolve(e,"database/db_init.json");if(fs.existsSync(r))try{const t=parseJson(r);o.push(...Object.keys(t))}catch(t){}}return o}module.exports={getType:getType,parseJson:parseJson,getRealWorkspace:getRealWorkspace,getAppid:getAppid,getModuleList:getModuleList,getCloudfunctionPathList:getCloudfunctionPathList,getFunctionPathList:getFunctionPathList,getCommonModulePathList:getCommonModulePathList,getCommonModulePath:getCommonModulePath,getFunctionEntry:getFunctionEntry,getUniIdPath:getUniIdPath,getActionPath:getActionPath,getSchemaPath:getSchemaPath,getValidateFunctionPath:getValidateFunctionPath,getWorkspacePathFromFilePath:getWorkspacePathFromFilePath,isUniAppCli:isUniAppCli,isModuleEncrypted:isModuleEncrypted,isFileEncrypted:isFileEncrypted,getAllModuleFunctionPath:getAllModuleFunctionPath,getEncryptedFunctionList:getEncryptedFunctionList,getCollectionListFromAllDbInit:getCollectionListFromAllDbInit,...require("./bridge.js")};