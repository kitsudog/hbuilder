class ErrorWithCode extends Error{constructor({message:e,code:s}={}){super(e),this.code=s}}const bridgeMessageType="JSON_RPC_Message";class JsonRpcClient{constructor({bridgeProcess:e}){this._id=0,this._bridgeProcess=e,this._promiseMap=new Map,this._bridgeProcess.on("message",(({type:e,result:s,error:r,id:o})=>{e===bridgeMessageType&&this._processMessage({result:s,error:r,id:o})}))}_processMessage({result:e,error:s,id:r}){if(!this._promiseMap.has(r))return;const{resolve:o,reject:t}=this._promiseMap.get(r);s?t(new ErrorWithCode({code:s.code,message:s.message})):o(e)}_send({method:e,params:s}){const r=++this._id;this._bridgeProcess.send({type:bridgeMessageType,id:r,method:e,params:s})}call(e,s){return new Promise(((r,o)=>{this._send({method:e,params:s}),this._promiseMap.set(this._id,{resolve:r,reject:o})}))}}const ErrorCode={ParseError:-32700,InvalidRequest:-32600,MethodNotFound:-32601,InvalidParams:-32602,InternalError:-32603};class JsonRpcServer{constructor({bridgeProcess:e}){this._bridgeProcess=e,this._methodMap=new Map,this._bridgeProcess.on("message",(({type:e,id:s,method:r,params:o})=>{e===bridgeMessageType&&this._processMessage({id:s,method:r,params:o})}))}expose(e,s){this._methodMap.set(e,s)}_send(e,s){this._bridgeProcess.send({type:bridgeMessageType,id:e,result:s})}_sendError(e,s,r,o){this._bridgeProcess.send({type:bridgeMessageType,id:e,error:{code:s,message:r&&r.message||r,data:o}})}_processMessage({id:e,method:s,params:r}){this._methodMap.has(s)||this._sendError(e,ErrorCode.MethodNotFound,`method[${s}] not found`);const o=this._methodMap.get(s);try{const s=o(r);s instanceof Promise?s.then((s=>{this._send(e,s)})).catch((s=>{this._sendError(e,ErrorCode.InternalError,s)})):this._send(e,s)}catch(s){this._sendError(e,ErrorCode.InternalError,s)}}}module.exports={JsonRpcClient:JsonRpcClient,JsonRpcServer:JsonRpcServer};