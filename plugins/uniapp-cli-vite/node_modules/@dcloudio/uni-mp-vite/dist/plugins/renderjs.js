"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uniRenderjsPlugin = exports.getFiltersCache = void 0;
const debug_1 = __importDefault(require("debug"));
const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
const debugRenderjs = (0, debug_1.default)('vite:uni:renderjs');
const filtersCache = new Map();
function getFiltersCache(resolvedConfig) {
    return filtersCache.get(resolvedConfig) || [];
}
exports.getFiltersCache = getFiltersCache;
const defaultCode = {
    code: 'export default {}',
};
function uniRenderjsPlugin({ lang }) {
    let resolvedConfig;
    return {
        name: 'vite:uni-mp-renderjs',
        configResolved(config) {
            resolvedConfig = config;
        },
        buildStart() {
            filtersCache.set(resolvedConfig, []);
        },
        transform(code, id) {
            const { type, name } = (0, uni_cli_shared_1.parseRenderjs)(id);
            if (!type) {
                return;
            }
            debugRenderjs(id);
            if (type !== lang) {
                return defaultCode;
            }
            this.addWatchFile((0, uni_cli_shared_1.cleanUrl)(id));
            if (!name) {
                this.error((0, uni_cli_shared_1.missingModuleName)(type, code));
            }
            else {
                filtersCache.get(resolvedConfig).push({
                    id,
                    type,
                    name,
                    code,
                });
            }
            return defaultCode;
        },
    };
}
exports.uniRenderjsPlugin = uniRenderjsPlugin;
